{"name": "libpldm_utils_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 5 tests from 5 test suites.\n[----------] Global test environment set-up.\n[----------] 1 test from Crc32\n[ RUN      ] Crc32.CheckSumTest\n[       OK ] Crc32.CheckSumTest (28 ms)\n[----------] 1 test from Crc32 (41 ms total)\n\n[----------] 1 test from Crc8\n[ RUN      ] Crc8.CheckSumTest\n[       OK ] Crc8.CheckSumTest (4 ms)\n[----------] 1 test from Crc8 (5 ms total)\n\n[----------] 1 test from Ver2string\n[ RUN      ] Ver2string.Ver2string\n[       OK ] Ver2string.Ver2string (46 ms)\n[----------] 1 test from Ver2string (46 ms total)\n\n[----------] 1 test from BcdConversion\n[ RUN      ] BcdConversion.BcdCoversion\n[       OK ] BcdConversion.BcdCoversion (25 ms)\n[----------] 1 test from BcdConversion (26 ms total)\n\n[----------] 1 test from TimeLegal\n[ RUN      ] TimeLegal.TimeLegal\n[       OK ] TimeLegal.TimeLegal (19 ms)\n[----------] 1 test from TimeLegal (20 ms total)\n\n[----------] Global test environment tear-down\n[==========] 5 tests from 5 test suites ran. (260 ms total)\n[  PASSED  ] 5 tests.\n", "result": "OK", "starttime": 1636192710.3937972, "duration": 3.5119428634643555, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "8"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_utils_test"], "stderr": "==1205== Memcheck, a memory error detector\n==1205== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1205== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1205== Command: /home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_utils_test\n==1205== \n==1205== \n==1205== HEAP SUMMARY:\n==1205==     in use at exit: 0 bytes in 0 blocks\n==1205==   total heap usage: 242 allocs, 242 frees, 124,684 bytes allocated\n==1205== \n==1205== All heap blocks were freed -- no leaks are possible\n==1205== \n==1205== For lists of detected and suppressed errors, rerun with: -s\n==1205== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldm_base_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 23 tests from 7 test suites.\n[----------] Global test environment set-up.\n[----------] 3 tests from PackPLDMMessage\n[ RUN      ] PackPLDMMessage.BadPathTest\n[       OK ] PackPLDMMessage.BadPathTest (31 ms)\n[ RUN      ] PackPLDMMessage.RequestMessageGoodPath\n[       OK ] PackPLDMMessage.RequestMessageGoodPath (48 ms)\n[ RUN      ] PackPLDMMessage.ResponseMessageGoodPath\n[       OK ] PackPLDMMessage.ResponseMessageGoodPath (35 ms)\n[----------] 3 tests from PackPLDMMessage (126 ms total)\n\n[----------] 3 tests from UnpackPLDMMessage\n[ RUN      ] UnpackPLDMMessage.BadPathTest\n[       OK ] UnpackPLDMMessage.BadPathTest (10 ms)\n[ RUN      ] UnpackPLDMMessage.RequestMessageGoodPath\n[       OK ] UnpackPLDMMessage.RequestMessageGoodPath (19 ms)\n[ RUN      ] UnpackPLDMMessage.ResponseMessageGoodPath\n[       OK ] UnpackPLDMMessage.ResponseMessageGoodPath (19 ms)\n[----------] 3 tests from UnpackPLDMMessage (52 ms total)\n\n[----------] 5 tests from GetPLDMCommands\n[ RUN      ] GetPLDMCommands.testEncodeRequest\n[       OK ] GetPLDMCommands.testEncodeRequest (32 ms)\n[ RUN      ] GetPLDMCommands.testDecodeRequest\n[       OK ] GetPLDMCommands.testDecodeRequest (20 ms)\n[ RUN      ] GetPLDMCommands.testEncodeResponse\n[       OK ] GetPLDMCommands.testEncodeResponse (34 ms)\n[ RUN      ] GetPLDMCommands.testGoodDecodeResponse\n[       OK ] GetPLDMCommands.testGoodDecodeResponse (34 ms)\n[ RUN      ] GetPLDMCommands.testBadDecodeResponse\n[       OK ] GetPLDMCommands.testBadDecodeResponse (5 ms)\n[----------] 5 tests from GetPLDMCommands (132 ms total)\n\n[----------] 3 tests from GetPLDMTypes\n[ RUN      ] GetPLDMTypes.testEncodeResponse\n[       OK ] GetPLDMTypes.testEncodeResponse (13 ms)\n[ RUN      ] GetPLDMTypes.testGoodDecodeResponse\n[       OK ] GetPLDMTypes.testGoodDecodeResponse (19 ms)\n[ RUN      ] GetPLDMTypes.testBadDecodeResponse\n[       OK ] GetPLDMTypes.testBadDecodeResponse (10 ms)\n[----------] 3 tests from GetPLDMTypes (44 ms total)\n\n[----------] 5 tests from GetPLDMVersion\n[ RUN      ] GetPLDMVersion.testGoodEncodeRequest\n[       OK ] GetPLDMVersion.testGoodEncodeRequest (9 ms)\n[ RUN      ] GetPLDMVersion.testBadEncodeRequest\n[       OK ] GetPLDMVersion.testBadEncodeRequest (9 ms)\n[ RUN      ] GetPLDMVersion.testEncodeResponse\n[       OK ] GetPLDMVersion.testEncodeResponse (27 ms)\n[ RUN      ] GetPLDMVersion.testDecodeRequest\n[       OK ] GetPLDMVersion.testDecodeRequest (12 ms)\n[ RUN      ] GetPLDMVersion.testDecodeResponse\n[       OK ] GetPLDMVersion.testDecodeResponse (16 ms)\n[----------] 5 tests from GetPLDMVersion (77 ms total)\n\n[----------] 3 tests from GetTID\n[ RUN      ] GetTID.testEncodeRequest\n[       OK ] GetTID.testEncodeRequest (3 ms)\n[ RUN      ] GetTID.testEncodeResponse\n[       OK ] GetTID.testEncodeResponse (7 ms)\n[ RUN      ] GetTID.testDecodeResponse\n[       OK ] GetTID.testDecodeResponse (9 ms)\n[----------] 3 tests from GetTID (21 ms total)\n\n[----------] 1 test from CcOnlyResponse\n[ RUN      ] CcOnlyResponse.testEncode\n[       OK ] CcOnlyResponse.testEncode (193 ms)\n[----------] 1 test from CcOnlyResponse (194 ms total)\n\n[----------] Global test environment tear-down\n[==========] 23 tests from 7 test suites ran. (751 ms total)\n[  PASSED  ] 23 tests.\n", "result": "OK", "starttime": 1636192710.3691814, "duration": 4.012991905212402, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "133"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_base_test"], "stderr": "==1195== Memcheck, a memory error detector\n==1195== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1195== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1195== Command: /home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_base_test\n==1195== \n==1195== \n==1195== HEAP SUMMARY:\n==1195==     in use at exit: 0 bytes in 0 blocks\n==1195==   total heap usage: 565 allocs, 565 frees, 151,075 bytes allocated\n==1195== \n==1195== All heap blocks were freed -- no leaks are possible\n==1195== \n==1195== For lists of detected and suppressed errors, rerun with: -s\n==1195== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldm_fru_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 26 tests from 5 test suites.\n[----------] Global test environment set-up.\n[----------] 6 tests from GetFruRecordTableMetadata\n[ RUN      ] GetFruRecordTableMetadata.testGoodEncodeRequest\n[       OK ] GetFruRecordTableMetadata.testGoodEncodeRequest (54 ms)\n[ RUN      ] GetFruRecordTableMetadata.testBadEncodeRequest\n[       OK ] GetFruRecordTableMetadata.testBadEncodeRequest (12 ms)\n[ RUN      ] GetFruRecordTableMetadata.testGoodDecodeResponse\n[       OK ] GetFruRecordTableMetadata.testGoodDecodeResponse (116 ms)\n[ RUN      ] GetFruRecordTableMetadata.testBadDecodeResponse\n[       OK ] GetFruRecordTableMetadata.testBadDecodeResponse (42 ms)\n[ RUN      ] GetFruRecordTableMetadata.testGoodEncodeResponse\n[       OK ] GetFruRecordTableMetadata.testGoodEncodeResponse (72 ms)\n[ RUN      ] GetFruRecordTableMetadata.testBadEncodeResponse\n[       OK ] GetFruRecordTableMetadata.testBadEncodeResponse (33 ms)\n[----------] 6 tests from GetFruRecordTableMetadata (354 ms total)\n\n[----------] 8 tests from GetFruRecordTable\n[ RUN      ] GetFruRecordTable.testGoodDecodeRequest\n[       OK ] GetFruRecordTable.testGoodDecodeRequest (8 ms)\n[ RUN      ] GetFruRecordTable.testBadDecodeRequest\n[       OK ] GetFruRecordTable.testBadDecodeRequest (9 ms)\n[ RUN      ] GetFruRecordTable.testGoodEncodeResponse\n[       OK ] GetFruRecordTable.testGoodEncodeResponse (15 ms)\n[ RUN      ] GetFruRecordTable.testBadEncodeResponse\n[       OK ] GetFruRecordTable.testBadEncodeResponse (11 ms)\n[ RUN      ] GetFruRecordTable.testGoodEncodeRequest\n[       OK ] GetFruRecordTable.testGoodEncodeRequest (17 ms)\n[ RUN      ] GetFruRecordTable.testBadEncodeRequest\n[       OK ] GetFruRecordTable.testBadEncodeRequest (8 ms)\n[ RUN      ] GetFruRecordTable.testGoodDecodeResponse\n[       OK ] GetFruRecordTable.testGoodDecodeResponse (42 ms)\n[ RUN      ] GetFruRecordTable.testBadDecodeResponse\n[       OK ] GetFruRecordTable.testBadDecodeResponse (10 ms)\n[----------] 8 tests from GetFruRecordTable (132 ms total)\n\n[----------] 4 tests from GetFRURecordByOption\n[ RUN      ] GetFRURecordByOption.testGoodEncodeRequest\n[       OK ] GetFRURecordByOption.testGoodEncodeRequest (25 ms)\n[ RUN      ] GetFRURecordByOption.testBadEncodeRequest\n[       OK ] GetFRURecordByOption.testBadEncodeRequest (5 ms)\n[ RUN      ] GetFRURecordByOption.testGoodDecodeRequest\n[       OK ] GetFRURecordByOption.testGoodDecodeRequest (14 ms)\n[ RUN      ] GetFRURecordByOption.testBadDecodeRequest\n[       OK ] GetFRURecordByOption.testBadDecodeRequest (5 ms)\n[----------] 4 tests from GetFRURecordByOption (51 ms total)\n\n[----------] 4 tests from GetFruRecordByOption\n[ RUN      ] GetFruRecordByOption.testGoodEncodeResponse\n[       OK ] GetFruRecordByOption.testGoodEncodeResponse (15 ms)\n[ RUN      ] GetFruRecordByOption.testBadEncodeResponse\n[       OK ] GetFruRecordByOption.testBadEncodeResponse (9 ms)\n[ RUN      ] GetFruRecordByOption.testGoodDecodeResponse\n[       OK ] GetFruRecordByOption.testGoodDecodeResponse (13 ms)\n[ RUN      ] GetFruRecordByOption.testBadDecodeResponse\n[       OK ] GetFruRecordByOption.testBadDecodeResponse (9 ms)\n[----------] 4 tests from GetFruRecordByOption (49 ms total)\n\n[----------] 4 tests from SetFRURecordTable\n[ RUN      ] SetFRURecordTable.testGoodEncodeResponse\n[       OK ] SetFRURecordTable.testGoodEncodeResponse (8 ms)\n[ RUN      ] SetFRURecordTable.testBadEncodeResponse\n[       OK ] SetFRURecordTable.testBadEncodeResponse (8 ms)\n[ RUN      ] SetFRURecordTable.testGoodDecodeRequest\n[       OK ] SetFRURecordTable.testGoodDecodeRequest (14 ms)\n[ RUN      ] SetFRURecordTable.testBadDecodeRequest\n[       OK ] SetFRURecordTable.testBadDecodeRequest (13 ms)\n[----------] 4 tests from SetFRURecordTable (47 ms total)\n\n[----------] Global test environment tear-down\n[==========] 26 tests from 5 test suites ran. (718 ms total)\n[  PASSED  ] 26 tests.\n", "result": "OK", "starttime": 1636192710.3896253, "duration": 4.055114507675171, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "229"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_fru_test"], "stderr": "==1203== Memcheck, a memory error detector\n==1203== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1203== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1203== Command: /home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_fru_test\n==1203== \n==1203== \n==1203== HEAP SUMMARY:\n==1203==     in use at exit: 0 bytes in 0 blocks\n==1203==   total heap usage: 780 allocs, 780 frees, 156,347 bytes allocated\n==1203== \n==1203== All heap blocks were freed -- no leaks are possible\n==1203== \n==1203== For lists of detected and suppressed errors, rerun with: -s\n==1203== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldm_bios_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 41 tests from 6 test suites.\n[----------] Global test environment set-up.\n[----------] 3 tests from GetDateTime\n[ RUN      ] GetDateTime.testEncodeRequest\n[       OK ] GetDateTime.testEncodeRequest (28 ms)\n[ RUN      ] GetDateTime.testEncodeResponse\n[       OK ] GetDateTime.testEncodeResponse (19 ms)\n[ RUN      ] GetDateTime.testDecodeResponse\n[       OK ] GetDateTime.testDecodeResponse (16 ms)\n[----------] 3 tests from GetDateTime (80 ms total)\n\n[----------] 8 tests from SetDateTime\n[ RUN      ] SetDateTime.testGoodEncodeResponse\n[       OK ] SetDateTime.testGoodEncodeResponse (9 ms)\n[ RUN      ] SetDateTime.testBadEncodeResponse\n[       OK ] SetDateTime.testBadEncodeResponse (5 ms)\n[ RUN      ] SetDateTime.testGoodDecodeResponse\n[       OK ] SetDateTime.testGoodDecodeResponse (8 ms)\n[ RUN      ] SetDateTime.testBadDecodeResponse\n[       OK ] SetDateTime.testBadDecodeResponse (8 ms)\n[ RUN      ] SetDateTime.testGoodEncodeRequset\n[       OK ] SetDateTime.testGoodEncodeRequset (38 ms)\n[ RUN      ] SetDateTime.testBadEncodeRequset\n[       OK ] SetDateTime.testBadEncodeRequset (22 ms)\n[ RUN      ] SetDateTime.testGoodDecodeRequest\n[       OK ] SetDateTime.testGoodDecodeRequest (29 ms)\n[ RUN      ] SetDateTime.testBadDecodeRequest\n[       OK ] SetDateTime.testBadDecodeRequest (8 ms)\n[----------] 8 tests from SetDateTime (134 ms total)\n\n[----------] 7 tests from GetBIOSTable\n[ RUN      ] GetBIOSTable.testGoodEncodeResponse\n[       OK ] GetBIOSTable.testGoodEncodeResponse (31 ms)\n[ RUN      ] GetBIOSTable.testBadEncodeResponse\n[       OK ] GetBIOSTable.testBadEncodeResponse (3 ms)\n[ RUN      ] GetBIOSTable.testGoodEncodeRequest\n[       OK ] GetBIOSTable.testGoodEncodeRequest (18 ms)\n[ RUN      ] GetBIOSTable.testBadEncodeRequest\n[       OK ] GetBIOSTable.testBadEncodeRequest (3 ms)\n[ RUN      ] GetBIOSTable.testGoodDecodeRequest\n[       OK ] GetBIOSTable.testGoodDecodeRequest (20 ms)\n[ RUN      ] GetBIOSTable.testBadDecodeRequest\n[       OK ] GetBIOSTable.testBadDecodeRequest (9 ms)\n[ RUN      ] GetBIOSTable.testDecodeResponse\n[       OK ] GetBIOSTable.testDecodeResponse (16 ms)\n[----------] 7 tests from GetBIOSTable (105 ms total)\n\n[----------] 7 tests from GetBIOSAttributeCurrentValueByHandle\n[ RUN      ] GetBIOSAttributeCurrentValueByHandle.testGoodDecodeRequest\n[       OK ] GetBIOSAttributeCurrentValueByHandle.testGoodDecodeRequest (18 ms)\n[ RUN      ] GetBIOSAttributeCurrentValueByHandle.testBadDecodeRequest\n[       OK ] GetBIOSAttributeCurrentValueByHandle.testBadDecodeRequest (9 ms)\n[ RUN      ] GetBIOSAttributeCurrentValueByHandle.testGoodEncodeRequest\n[       OK ] GetBIOSAttributeCurrentValueByHandle.testGoodEncodeRequest (10 ms)\n[ RUN      ] GetBIOSAttributeCurrentValueByHandle.testBadEncodeRequest\n[       OK ] GetBIOSAttributeCurrentValueByHandle.testBadEncodeRequest (4 ms)\n[ RUN      ] GetBIOSAttributeCurrentValueByHandle.testGoodEncodeResponse\n[       OK ] GetBIOSAttributeCurrentValueByHandle.testGoodEncodeResponse (10 ms)\n[ RUN      ] GetBIOSAttributeCurrentValueByHandle.testBadEncodeResponse\n[       OK ] GetBIOSAttributeCurrentValueByHandle.testBadEncodeResponse (6 ms)\n[ RUN      ] GetBIOSAttributeCurrentValueByHandle.testDecodeResponse\n[       OK ] GetBIOSAttributeCurrentValueByHandle.testDecodeResponse (13 ms)\n[----------] 7 tests from GetBIOSAttributeCurrentValueByHandle (75 ms total)\n\n[----------] 8 tests from SetBiosAttributeCurrentValue\n[ RUN      ] SetBiosAttributeCurrentValue.testGoodEncodeRequest\n[       OK ] SetBiosAttributeCurrentValue.testGoodEncodeRequest (10 ms)\n[ RUN      ] SetBiosAttributeCurrentValue.testBadEncodeRequest\n[       OK ] SetBiosAttributeCurrentValue.testBadEncodeRequest (11 ms)\n[ RUN      ] SetBiosAttributeCurrentValue.testGoodDecodeRequest\n[       OK ] SetBiosAttributeCurrentValue.testGoodDecodeRequest (19 ms)\n[ RUN      ] SetBiosAttributeCurrentValue.testBadDecodeRequest\n[       OK ] SetBiosAttributeCurrentValue.testBadDecodeRequest (6 ms)\n[ RUN      ] SetBiosAttributeCurrentValue.testGoodEncodeResponse\n[       OK ] SetBiosAttributeCurrentValue.testGoodEncodeResponse (12 ms)\n[ RUN      ] SetBiosAttributeCurrentValue.testBadEncodeResponse\n[       OK ] SetBiosAttributeCurrentValue.testBadEncodeResponse (3 ms)\n[ RUN      ] SetBiosAttributeCurrentValue.testGoodDecodeResponse\n[       OK ] SetBiosAttributeCurrentValue.testGoodDecodeResponse (13 ms)\n[ RUN      ] SetBiosAttributeCurrentValue.testBadDecodeResponse\n[       OK ] SetBiosAttributeCurrentValue.testBadDecodeResponse (5 ms)\n[----------] 8 tests from SetBiosAttributeCurrentValue (87 ms total)\n\n[----------] 8 tests from SetBIOSTable\n[ RUN      ] SetBIOSTable.testGoodEncodeRequest\n[       OK ] SetBIOSTable.testGoodEncodeRequest (13 ms)\n[ RUN      ] SetBIOSTable.testBadEncodeRequest\n[       OK ] SetBIOSTable.testBadEncodeRequest (6 ms)\n[ RUN      ] SetBIOSTable.testGoodDecodeResponse\n[       OK ] SetBIOSTable.testGoodDecodeResponse (10 ms)\n[ RUN      ] SetBIOSTable.testBadDecodeResponse\n[       OK ] SetBIOSTable.testBadDecodeResponse (6 ms)\n[ RUN      ] SetBIOSTable.testGoodEncodeResponse\n[       OK ] SetBIOSTable.testGoodEncodeResponse (13 ms)\n[ RUN      ] SetBIOSTable.testBadEncodeResponse\n[       OK ] SetBIOSTable.testBadEncodeResponse (3 ms)\n[ RUN      ] SetBIOSTable.testGoodDecodeRequest\n[       OK ] SetBIOSTable.testGoodDecodeRequest (15 ms)\n[ RUN      ] SetBIOSTable.testBadDecodeRequest\n[       OK ] SetBIOSTable.testBadDecodeRequest (7 ms)\n[----------] 8 tests from SetBIOSTable (85 ms total)\n\n[----------] Global test environment tear-down\n[==========] 41 tests from 6 test suites ran. (683 ms total)\n[  PASSED  ] 41 tests.\n", "result": "OK", "starttime": 1636192710.375574, "duration": 4.635051012039185, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "185"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_bios_test"], "stderr": "==1199== Memcheck, a memory error detector\n==1199== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1199== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1199== Command: /home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_bios_test\n==1199== \n==1199== \n==1199== HEAP SUMMARY:\n==1199==     in use at exit: 0 bytes in 0 blocks\n==1199==   total heap usage: 876 allocs, 876 frees, 174,321 bytes allocated\n==1199== \n==1199== All heap blocks were freed -- no leaks are possible\n==1199== \n==1199== For lists of detected and suppressed errors, rerun with: -s\n==1199== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldm_pdr_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 17 tests from 3 test suites.\n[----------] Global test environment set-up.\n[----------] 4 tests from PDRAccess\n[ RUN      ] PDRAccess.testInit\n[       OK ] PDRAccess.testInit (30 ms)\n[ RUN      ] PDRAccess.testGet\n[       OK ] PDRAccess.testGet (109 ms)\n[ RUN      ] PDRAccess.testGetNext\n[       OK ] PDRAccess.testGetNext (37 ms)\n[ RUN      ] PDRAccess.testFindByType\n[       OK ] PDRAccess.testFindByType (26 ms)\n[----------] 4 tests from PDRAccess (227 ms total)\n\n[----------] 4 tests from PDRUpdate\n[ RUN      ] PDRUpdate.testAdd\n[       OK ] PDRUpdate.testAdd (17 ms)\n[ RUN      ] PDRUpdate.testRemove\n[       OK ] PDRUpdate.testRemove (120 ms)\n[ RUN      ] PDRUpdate.testAddFruRecordSet\n[       OK ] PDRUpdate.testAddFruRecordSet (87 ms)\n[ RUN      ] PDRUpdate.tesFindtFruRecordSet\n[       OK ] PDRUpdate.tesFindtFruRecordSet (20 ms)\n[----------] 4 tests from PDRUpdate (248 ms total)\n\n[----------] 9 tests from EntityAssociationPDR\n[ RUN      ] EntityAssociationPDR.testInit\n[       OK ] EntityAssociationPDR.testInit (12 ms)\n[ RUN      ] EntityAssociationPDR.testBuild\n[       OK ] EntityAssociationPDR.testBuild (211 ms)\n[ RUN      ] EntityAssociationPDR.testSpecialTrees\n[       OK ] EntityAssociationPDR.testSpecialTrees (209 ms)\n[ RUN      ] EntityAssociationPDR.testPDR\n[       OK ] EntityAssociationPDR.testPDR (230 ms)\n[ RUN      ] EntityAssociationPDR.testFind\n[       OK ] EntityAssociationPDR.testFind (39 ms)\n[ RUN      ] EntityAssociationPDR.testCopyTree\n[       OK ] EntityAssociationPDR.testCopyTree (31 ms)\n[ RUN      ] EntityAssociationPDR.testExtract\n[       OK ] EntityAssociationPDR.testExtract (84 ms)\n[ RUN      ] EntityAssociationPDR.testGetChildren\n[       OK ] EntityAssociationPDR.testGetChildren (12 ms)\n[ RUN      ] EntityAssociationPDR.testEntityInstanceNumber\n[       OK ] EntityAssociationPDR.testEntityInstanceNumber (70 ms)\n[----------] 9 tests from EntityAssociationPDR (906 ms total)\n\n[----------] Global test environment tear-down\n[==========] 17 tests from 3 test suites ran. (1515 ms total)\n[  PASSED  ] 17 tests.\n", "result": "OK", "starttime": 1636192710.4013083, "duration": 5.052025318145752, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "218"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_pdr_test"], "stderr": "==1207== Memcheck, a memory error detector\n==1207== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1207== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1207== Command: /home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_pdr_test\n==1207== \n==1207== \n==1207== HEAP SUMMARY:\n==1207==     in use at exit: 0 bytes in 0 blocks\n==1207==   total heap usage: 762 allocs, 762 frees, 145,792 bytes allocated\n==1207== \n==1207== All heap blocks were freed -- no leaks are possible\n==1207== \n==1207== For lists of detected and suppressed errors, rerun with: -s\n==1207== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldm_platform_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 72 tests from 9 test suites.\n[----------] Global test environment set-up.\n[----------] 6 tests from SetStateEffecterStates\n[ RUN      ] SetStateEffecterStates.testEncodeResponse\n[       OK ] SetStateEffecterStates.testEncodeResponse (27 ms)\n[ RUN      ] SetStateEffecterStates.testEncodeRequest\n[       OK ] SetStateEffecterStates.testEncodeRequest (37 ms)\n[ RUN      ] SetStateEffecterStates.testGoodDecodeResponse\n[       OK ] SetStateEffecterStates.testGoodDecodeResponse (16 ms)\n[ RUN      ] SetStateEffecterStates.testGoodDecodeRequest\n[       OK ] SetStateEffecterStates.testGoodDecodeRequest (22 ms)\n[ RUN      ] SetStateEffecterStates.testBadDecodeRequest\n[       OK ] SetStateEffecterStates.testBadDecodeRequest (4 ms)\n[ RUN      ] SetStateEffecterStates.testBadDecodeResponse\n[       OK ] SetStateEffecterStates.testBadDecodeResponse (5 ms)\n[----------] 6 tests from SetStateEffecterStates (137 ms total)\n\n[----------] 8 tests from GetPDR\n[ RUN      ] GetPDR.testGoodEncodeResponse\n[       OK ] GetPDR.testGoodEncodeResponse (107 ms)\n[ RUN      ] GetPDR.testBadEncodeResponse\n[       OK ] GetPDR.testBadEncodeResponse (10 ms)\n[ RUN      ] GetPDR.testGoodDecodeRequest\n[       OK ] GetPDR.testGoodDecodeRequest (18 ms)\n[ RUN      ] GetPDR.testBadDecodeRequest\n[       OK ] GetPDR.testBadDecodeRequest (6 ms)\n[ RUN      ] GetPDR.testGoodEncodeRequest\n[       OK ] GetPDR.testGoodEncodeRequest (17 ms)\n[ RUN      ] GetPDR.testBadEncodeRequest\n[       OK ] GetPDR.testBadEncodeRequest (6 ms)\n[ RUN      ] GetPDR.testGoodDecodeResponse\n[       OK ] GetPDR.testGoodDecodeResponse (29 ms)\n[ RUN      ] GetPDR.testBadDecodeResponse\n[       OK ] GetPDR.testBadDecodeResponse (12 ms)\n[----------] 8 tests from GetPDR (220 ms total)\n\n[----------] 8 tests from SetNumericEffecterValue\n[ RUN      ] SetNumericEffecterValue.testGoodDecodeRequest\n[       OK ] SetNumericEffecterValue.testGoodDecodeRequest (17 ms)\n[ RUN      ] SetNumericEffecterValue.testBadDecodeRequest\n[       OK ] SetNumericEffecterValue.testBadDecodeRequest (7 ms)\n[ RUN      ] SetNumericEffecterValue.testGoodEncodeRequest\n[       OK ] SetNumericEffecterValue.testGoodEncodeRequest (29 ms)\n[ RUN      ] SetNumericEffecterValue.testBadEncodeRequest\n[       OK ] SetNumericEffecterValue.testBadEncodeRequest (6 ms)\n[ RUN      ] SetNumericEffecterValue.testGoodDecodeResponse\n[       OK ] SetNumericEffecterValue.testGoodDecodeResponse (8 ms)\n[ RUN      ] SetNumericEffecterValue.testBadDecodeResponse\n[       OK ] SetNumericEffecterValue.testBadDecodeResponse (34 ms)\n[ RUN      ] SetNumericEffecterValue.testGoodEncodeResponse\n[       OK ] SetNumericEffecterValue.testGoodEncodeResponse (5 ms)\n[ RUN      ] SetNumericEffecterValue.testBadEncodeResponse\n[       OK ] SetNumericEffecterValue.testBadEncodeResponse (3 ms)\n[----------] 8 tests from SetNumericEffecterValue (115 ms total)\n\n[----------] 8 tests from GetStateSensorReadings\n[ RUN      ] GetStateSensorReadings.testGoodEncodeResponse\n[       OK ] GetStateSensorReadings.testGoodEncodeResponse (26 ms)\n[ RUN      ] GetStateSensorReadings.testBadEncodeResponse\n[       OK ] GetStateSensorReadings.testBadEncodeResponse (3 ms)\n[ RUN      ] GetStateSensorReadings.testGoodDecodeResponse\n[       OK ] GetStateSensorReadings.testGoodDecodeResponse (20 ms)\n[ RUN      ] GetStateSensorReadings.testBadDecodeResponse\n[       OK ] GetStateSensorReadings.testBadDecodeResponse (11 ms)\n[ RUN      ] GetStateSensorReadings.testGoodEncodeRequest\n[       OK ] GetStateSensorReadings.testGoodEncodeRequest (7 ms)\n[ RUN      ] GetStateSensorReadings.testBadEncodeRequest\n[       OK ] GetStateSensorReadings.testBadEncodeRequest (6 ms)\n[ RUN      ] GetStateSensorReadings.testGoodDecodeRequest\n[       OK ] GetStateSensorReadings.testGoodDecodeRequest (17 ms)\n[ RUN      ] GetStateSensorReadings.testBadDecodeRequest\n[       OK ] GetStateSensorReadings.testBadDecodeRequest (5 ms)\n[----------] 8 tests from GetStateSensorReadings (105 ms total)\n\n[----------] 16 tests from PlatformEventMessage\n[ RUN      ] PlatformEventMessage.testGoodStateSensorDecodeRequest\n[       OK ] PlatformEventMessage.testGoodStateSensorDecodeRequest (9 ms)\n[ RUN      ] PlatformEventMessage.testBadDecodeRequest\n[       OK ] PlatformEventMessage.testBadDecodeRequest (9 ms)\n[ RUN      ] PlatformEventMessage.testGoodEncodeResponse\n[       OK ] PlatformEventMessage.testGoodEncodeResponse (6 ms)\n[ RUN      ] PlatformEventMessage.testBadEncodeResponse\n[       OK ] PlatformEventMessage.testBadEncodeResponse (3 ms)\n[ RUN      ] PlatformEventMessage.testGoodEncodeRequest\n[       OK ] PlatformEventMessage.testGoodEncodeRequest (11 ms)\n[ RUN      ] PlatformEventMessage.testBadEncodeRequest\n[       OK ] PlatformEventMessage.testBadEncodeRequest (16 ms)\n[ RUN      ] PlatformEventMessage.testGoodDecodeResponse\n[       OK ] PlatformEventMessage.testGoodDecodeResponse (15 ms)\n[ RUN      ] PlatformEventMessage.testBadDecodeResponse\n[       OK ] PlatformEventMessage.testBadDecodeResponse (6 ms)\n[ RUN      ] PlatformEventMessage.testGoodSensorEventDataDecodeRequest\n[       OK ] PlatformEventMessage.testGoodSensorEventDataDecodeRequest (13 ms)\n[ RUN      ] PlatformEventMessage.testBadSensorEventDataDecodeRequest\n[       OK ] PlatformEventMessage.testBadSensorEventDataDecodeRequest (19 ms)\n[ RUN      ] PlatformEventMessage.testGoodSensorOpEventDataDecodeRequest\n[       OK ] PlatformEventMessage.testGoodSensorOpEventDataDecodeRequest (10 ms)\n[ RUN      ] PlatformEventMessage.testBadSensorOpEventDataDecodeRequest\n[       OK ] PlatformEventMessage.testBadSensorOpEventDataDecodeRequest (7 ms)\n[ RUN      ] PlatformEventMessage.testGoodSensorStateEventDataDecodeRequest\n[       OK ] PlatformEventMessage.testGoodSensorStateEventDataDecodeRequest (19 ms)\n[ RUN      ] PlatformEventMessage.testBadStateSensorEventDataDecodeRequest\n[       OK ] PlatformEventMessage.testBadStateSensorEventDataDecodeRequest (6 ms)\n[ RUN      ] PlatformEventMessage.testGoodNumericSensorEventDataDecodeRequest\n[       OK ] PlatformEventMessage.testGoodNumericSensorEventDataDecodeRequest (31 ms)\n[ RUN      ] PlatformEventMessage.testBadNumericSensorEventDataDecodeRequest\n[       OK ] PlatformEventMessage.testBadNumericSensorEventDataDecodeRequest (24 ms)\n[----------] 16 tests from PlatformEventMessage (228 ms total)\n\n[----------] 8 tests from GetNumericEffecterValue\n[ RUN      ] GetNumericEffecterValue.testGoodEncodeRequest\n[       OK ] GetNumericEffecterValue.testGoodEncodeRequest (16 ms)\n[ RUN      ] GetNumericEffecterValue.testBadEncodeRequest\n[       OK ] GetNumericEffecterValue.testBadEncodeRequest (5 ms)\n[ RUN      ] GetNumericEffecterValue.testGoodDecodeRequest\n[       OK ] GetNumericEffecterValue.testGoodDecodeRequest (5 ms)\n[ RUN      ] GetNumericEffecterValue.testBadDecodeRequest\n[       OK ] GetNumericEffecterValue.testBadDecodeRequest (7 ms)\n[ RUN      ] GetNumericEffecterValue.testGoodEncodeResponse\n[       OK ] GetNumericEffecterValue.testGoodEncodeResponse (17 ms)\n[ RUN      ] GetNumericEffecterValue.testBadEncodeResponse\n[       OK ] GetNumericEffecterValue.testBadEncodeResponse (7 ms)\n[ RUN      ] GetNumericEffecterValue.testGoodDecodeResponse\n[       OK ] GetNumericEffecterValue.testGoodDecodeResponse (15 ms)\n[ RUN      ] GetNumericEffecterValue.testBadDecodeResponse\n[       OK ] GetNumericEffecterValue.testBadDecodeResponse (7 ms)\n[----------] 8 tests from GetNumericEffecterValue (90 ms total)\n\n[----------] 2 tests from PldmPDRRepositoryChgEventEvent\n[ RUN      ] PldmPDRRepositoryChgEventEvent.testGoodDecodeRequest\n[       OK ] PldmPDRRepositoryChgEventEvent.testGoodDecodeRequest (27 ms)\n[ RUN      ] PldmPDRRepositoryChgEventEvent.testBadDecodeRequest\n[       OK ] PldmPDRRepositoryChgEventEvent.testBadDecodeRequest (12 ms)\n[----------] 2 tests from PldmPDRRepositoryChgEventEvent (40 ms total)\n\n[----------] 8 tests from GetSensorReading\n[ RUN      ] GetSensorReading.testGoodEncodeRequest\n[       OK ] GetSensorReading.testGoodEncodeRequest (10 ms)\n[ RUN      ] GetSensorReading.testBadEncodeRequest\n[       OK ] GetSensorReading.testBadEncodeRequest (3 ms)\n[ RUN      ] GetSensorReading.testGoodDecodeRequest\n[       OK ] GetSensorReading.testGoodDecodeRequest (8 ms)\n[ RUN      ] GetSensorReading.testBadDecodeRequest\n[       OK ] GetSensorReading.testBadDecodeRequest (9 ms)\n[ RUN      ] GetSensorReading.testGoodEncodeResponse\n[       OK ] GetSensorReading.testGoodEncodeResponse (23 ms)\n[ RUN      ] GetSensorReading.testBadEncodeResponse\n[       OK ] GetSensorReading.testBadEncodeResponse (14 ms)\n[ RUN      ] GetSensorReading.testGoodDecodeResponse\n[       OK ] GetSensorReading.testGoodDecodeResponse (25 ms)\n[ RUN      ] GetSensorReading.testBadDecodeResponse\n[       OK ] GetSensorReading.testBadDecodeResponse (6 ms)\n[----------] 8 tests from GetSensorReading (109 ms total)\n\n[----------] 8 tests from SetEventReceiver\n[ RUN      ] SetEventReceiver.testGoodEncodeRequest\n[       OK ] SetEventReceiver.testGoodEncodeRequest (14 ms)\n[ RUN      ] SetEventReceiver.testBadEncodeRequest\n[       OK ] SetEventReceiver.testBadEncodeRequest (10 ms)\n[ RUN      ] SetEventReceiver.testGoodDecodeResponse\n[       OK ] SetEventReceiver.testGoodDecodeResponse (11 ms)\n[ RUN      ] SetEventReceiver.testBadDecodeResponse\n[       OK ] SetEventReceiver.testBadDecodeResponse (4 ms)\n[ RUN      ] SetEventReceiver.testGoodEncodeResponse\n[       OK ] SetEventReceiver.testGoodEncodeResponse (6 ms)\n[ RUN      ] SetEventReceiver.testBadEncodeResponse\n[       OK ] SetEventReceiver.testBadEncodeResponse (4 ms)\n[ RUN      ] SetEventReceiver.testGoodDecodeRequest\n[       OK ] SetEventReceiver.testGoodDecodeRequest (15 ms)\n[ RUN      ] SetEventReceiver.testBadDecodeRequest\n[       OK ] SetEventReceiver.testBadDecodeRequest (5 ms)\n[----------] 8 tests from SetEventReceiver (77 ms total)\n\n[----------] Global test environment tear-down\n[==========] 72 tests from 9 test suites ran. (1222 ms total)\n[  PASSED  ] 72 tests.\n", "result": "OK", "starttime": 1636192710.3728611, "duration": 5.36268162727356, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "140"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_platform_test"], "stderr": "==1197== Memcheck, a memory error detector\n==1197== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1197== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1197== Command: /home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_platform_test\n==1197== \n==1197== Conditional jump or move depends on uninitialised value(s)\n==1197==    at 0x485EFEC: decode_set_event_receiver_req (platform.c:1624)\n==1197==    by 0x127BC5: SetEventReceiver_testGoodDecodeRequest_Test::TestBody() (libpldm_platform_test.cpp:1991)\n==1197==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1197==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1197==    by 0x48C9165: Run (gtest.cc:2682)\n==1197==    by 0x48C9165: testing::Test::Run() (gtest.cc:2672)\n==1197==    by 0x48C92E4: Run (gtest.cc:2861)\n==1197==    by 0x48C92E4: testing::TestInfo::Run() (gtest.cc:2833)\n==1197==    by 0x48C98A8: Run (gtest.cc:3015)\n==1197==    by 0x48C98A8: testing::TestSuite::Run() (gtest.cc:2993)\n==1197==    by 0x48C9FEE: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\n==1197==    by 0x48D6566: HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (gtest.cc:2607)\n==1197==    by 0x48D6566: bool testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool>(testing::internal::UnitTestImpl*, bool (testing::internal::UnitTestImpl::*)(), char const*) (gtest.cc:2643)\n==1197==    by 0x48C93AB: testing::UnitTest::Run() (gtest.cc:5438)\n==1197==    by 0x4879143: RUN_ALL_TESTS (gtest.h:2490)\n==1197==    by 0x4879143: main (gtest_main.cc:52)\n==1197== \n==1197== \n==1197== HEAP SUMMARY:\n==1197==     in use at exit: 0 bytes in 0 blocks\n==1197==   total heap usage: 1,724 allocs, 1,724 frees, 227,407 bytes allocated\n==1197== \n==1197== All heap blocks were freed -- no leaks are possible\n==1197== \n==1197== Use --track-origins=yes to see where uninitialised values come from\n==1197== For lists of detected and suppressed errors, rerun with: -s\n==1197== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldm_firmware_update_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 63 tests from 17 test suites.\n[----------] Global test environment set-up.\n[----------] 2 tests from DecodePackageHeaderInfo\n[ RUN      ] DecodePackageHeaderInfo.goodPath\n[       OK ] DecodePackageHeaderInfo.goodPath (105 ms)\n[ RUN      ] DecodePackageHeaderInfo.errorPaths\n[       OK ] DecodePackageHeaderInfo.errorPaths (24 ms)\n[----------] 2 tests from DecodePackageHeaderInfo (140 ms total)\n\n[----------] 3 tests from DecodeFirmwareDeviceIdRecord\n[ RUN      ] DecodeFirmwareDeviceIdRecord.goodPath\n[       OK ] DecodeFirmwareDeviceIdRecord.goodPath (125 ms)\n[ RUN      ] DecodeFirmwareDeviceIdRecord.goodPathNofwDevicePkgData\n[       OK ] DecodeFirmwareDeviceIdRecord.goodPathNofwDevicePkgData (40 ms)\n[ RUN      ] DecodeFirmwareDeviceIdRecord.ErrorPaths\n[       OK ] DecodeFirmwareDeviceIdRecord.ErrorPaths (26 ms)\n[----------] 3 tests from DecodeFirmwareDeviceIdRecord (199 ms total)\n\n[----------] 3 tests from DecodeDescriptors\n[ RUN      ] DecodeDescriptors.goodPath3Descriptors\n[       OK ] DecodeDescriptors.goodPath3Descriptors (31 ms)\n[ RUN      ] DecodeDescriptors.errorPathDecodeDescriptorTLV\n[       OK ] DecodeDescriptors.errorPathDecodeDescriptorTLV (18 ms)\n[ RUN      ] DecodeDescriptors.errorPathVendorDefinedDescriptor\n[       OK ] DecodeDescriptors.errorPathVendorDefinedDescriptor (24 ms)\n[----------] 3 tests from DecodeDescriptors (75 ms total)\n\n[----------] 2 tests from DecodeComponentImageInfo\n[ RUN      ] DecodeComponentImageInfo.goodPath\n[       OK ] DecodeComponentImageInfo.goodPath (34 ms)\n[ RUN      ] DecodeComponentImageInfo.errorPaths\n[       OK ] DecodeComponentImageInfo.errorPaths (23 ms)\n[----------] 2 tests from DecodeComponentImageInfo (59 ms total)\n\n[----------] 2 tests from QueryDeviceIdentifiers\n[ RUN      ] QueryDeviceIdentifiers.goodPathEncodeRequest\n[       OK ] QueryDeviceIdentifiers.goodPathEncodeRequest (20 ms)\n[ RUN      ] QueryDeviceIdentifiers.goodPathDecodeResponse\n[       OK ] QueryDeviceIdentifiers.goodPathDecodeResponse (22 ms)\n[----------] 2 tests from QueryDeviceIdentifiers (44 ms total)\n\n[----------] 7 tests from GetFirmwareParameters\n[ RUN      ] GetFirmwareParameters.goodPathEncodeRequest\n[       OK ] GetFirmwareParameters.goodPathEncodeRequest (13 ms)\n[ RUN      ] GetFirmwareParameters.decodeResponse\n[       OK ] GetFirmwareParameters.decodeResponse (53 ms)\n[ RUN      ] GetFirmwareParameters.decodeResponseZeroCompCount\n[       OK ] GetFirmwareParameters.decodeResponseZeroCompCount (30 ms)\n[ RUN      ] GetFirmwareParameters.decodeResponseNoPendingCompImageVersionStrZeroCompCount\n[       OK ] GetFirmwareParameters.decodeResponseNoPendingCompImageVersionStrZeroCompCount (47 ms)\n[ RUN      ] GetFirmwareParameters.decodeResponseErrorCompletionCode\n[       OK ] GetFirmwareParameters.decodeResponseErrorCompletionCode (9 ms)\n[ RUN      ] GetFirmwareParameters.errorPathdecodeResponse\n[       OK ] GetFirmwareParameters.errorPathdecodeResponse (35 ms)\n[ RUN      ] GetFirmwareParameters.goodPathDecodeComponentParameterEntry\n[       OK ] GetFirmwareParameters.goodPathDecodeComponentParameterEntry (46 ms)\n[----------] 7 tests from GetFirmwareParameters (240 ms total)\n\n[----------] 4 tests from RequestUpdate\n[ RUN      ] RequestUpdate.goodPathEncodeRequest\n[       OK ] RequestUpdate.goodPathEncodeRequest (15 ms)\n[ RUN      ] RequestUpdate.errorPathEncodeRequest\n[       OK ] RequestUpdate.errorPathEncodeRequest (25 ms)\n[ RUN      ] RequestUpdate.goodPathDecodeResponse\n[       OK ] RequestUpdate.goodPathDecodeResponse (17 ms)\n[ RUN      ] RequestUpdate.errorPathDecodeResponse\n[       OK ] RequestUpdate.errorPathDecodeResponse (11 ms)\n[----------] 4 tests from RequestUpdate (72 ms total)\n\n[----------] 4 tests from PassComponentTable\n[ RUN      ] PassComponentTable.goodPathEncodeRequest\n[       OK ] PassComponentTable.goodPathEncodeRequest (14 ms)\n[ RUN      ] PassComponentTable.errorPathEncodeRequest\n[       OK ] PassComponentTable.errorPathEncodeRequest (29 ms)\n[ RUN      ] PassComponentTable.goodPathDecodeResponse\n[       OK ] PassComponentTable.goodPathDecodeResponse (21 ms)\n[ RUN      ] PassComponentTable.errorPathDecodeResponse\n[       OK ] PassComponentTable.errorPathDecodeResponse (25 ms)\n[----------] 4 tests from PassComponentTable (91 ms total)\n\n[----------] 4 tests from UpdateComponent\n[ RUN      ] UpdateComponent.goodPathEncodeRequest\n[       OK ] UpdateComponent.goodPathEncodeRequest (19 ms)\n[ RUN      ] UpdateComponent.errorPathEncodeRequest\n[       OK ] UpdateComponent.errorPathEncodeRequest (32 ms)\n[ RUN      ] UpdateComponent.goodPathDecodeResponse\n[       OK ] UpdateComponent.goodPathDecodeResponse (52 ms)\n[ RUN      ] UpdateComponent.errorPathDecodeResponse\n[       OK ] UpdateComponent.errorPathDecodeResponse (26 ms)\n[----------] 4 tests from UpdateComponent (132 ms total)\n\n[----------] 4 tests from RequestFirmwareData\n[ RUN      ] RequestFirmwareData.goodPathDecodeRequest\n[       OK ] RequestFirmwareData.goodPathDecodeRequest (9 ms)\n[ RUN      ] RequestFirmwareData.errorPathDecodeRequest\n[       OK ] RequestFirmwareData.errorPathDecodeRequest (14 ms)\n[ RUN      ] RequestFirmwareData.goodPathEncodeResponse\n[       OK ] RequestFirmwareData.goodPathEncodeResponse (37 ms)\n[ RUN      ] RequestFirmwareData.errorPathEncodeResponse\n[       OK ] RequestFirmwareData.errorPathEncodeResponse (5 ms)\n[----------] 4 tests from RequestFirmwareData (71 ms total)\n\n[----------] 4 tests from TransferComplete\n[ RUN      ] TransferComplete.goodPathDecodeRequest\n[       OK ] TransferComplete.goodPathDecodeRequest (10 ms)\n[ RUN      ] TransferComplete.errorPathDecodeRequest\n[       OK ] TransferComplete.errorPathDecodeRequest (6 ms)\n[ RUN      ] TransferComplete.goodPathEncodeResponse\n[       OK ] TransferComplete.goodPathEncodeResponse (11 ms)\n[ RUN      ] TransferComplete.errorPathEncodeResponse\n[       OK ] TransferComplete.errorPathEncodeResponse (4 ms)\n[----------] 4 tests from TransferComplete (36 ms total)\n\n[----------] 4 tests from VerifyComplete\n[ RUN      ] VerifyComplete.goodPathDecodeRequest\n[       OK ] VerifyComplete.goodPathDecodeRequest (11 ms)\n[ RUN      ] VerifyComplete.errorPathDecodeRequest\n[       OK ] VerifyComplete.errorPathDecodeRequest (8 ms)\n[ RUN      ] VerifyComplete.goodPathEncodeResponse\n[       OK ] VerifyComplete.goodPathEncodeResponse (10 ms)\n[ RUN      ] VerifyComplete.errorPathEncodeResponse\n[       OK ] VerifyComplete.errorPathEncodeResponse (8 ms)\n[----------] 4 tests from VerifyComplete (41 ms total)\n\n[----------] 4 tests from ApplyComplete\n[ RUN      ] ApplyComplete.goodPathDecodeRequest\n[       OK ] ApplyComplete.goodPathDecodeRequest (18 ms)\n[ RUN      ] ApplyComplete.errorPathDecodeRequest\n[       OK ] ApplyComplete.errorPathDecodeRequest (11 ms)\n[ RUN      ] ApplyComplete.goodPathEncodeResponse\n[       OK ] ApplyComplete.goodPathEncodeResponse (18 ms)\n[ RUN      ] ApplyComplete.errorPathEncodeResponse\n[       OK ] ApplyComplete.errorPathEncodeResponse (6 ms)\n[----------] 4 tests from ApplyComplete (58 ms total)\n\n[----------] 4 tests from ActivateFirmware\n[ RUN      ] ActivateFirmware.goodPathEncodeRequest\n[       OK ] ActivateFirmware.goodPathEncodeRequest (8 ms)\n[ RUN      ] ActivateFirmware.errorPathEncodeRequest\n[       OK ] ActivateFirmware.errorPathEncodeRequest (6 ms)\n[ RUN      ] ActivateFirmware.goodPathDecodeResponse\n[       OK ] ActivateFirmware.goodPathDecodeResponse (17 ms)\n[ RUN      ] ActivateFirmware.errorPathDecodeResponse\n[       OK ] ActivateFirmware.errorPathDecodeResponse (11 ms)\n[----------] 4 tests from ActivateFirmware (46 ms total)\n\n[----------] 4 tests from GetStatus\n[ RUN      ] GetStatus.goodPathEncodeRequest\n[       OK ] GetStatus.goodPathEncodeRequest (9 ms)\n[ RUN      ] GetStatus.errorPathEncodeRequest\n[       OK ] GetStatus.errorPathEncodeRequest (7 ms)\n[ RUN      ] GetStatus.goodPathDecodeResponse\n[       OK ] GetStatus.goodPathDecodeResponse (85 ms)\n[ RUN      ] GetStatus.errorPathDecodeResponse\n[       OK ] GetStatus.errorPathDecodeResponse (57 ms)\n[----------] 4 tests from GetStatus (161 ms total)\n\n[----------] 4 tests from CancelUpdateComponent\n[ RUN      ] CancelUpdateComponent.goodPathEncodeRequest\n[       OK ] CancelUpdateComponent.goodPathEncodeRequest (8 ms)\n[ RUN      ] CancelUpdateComponent.errorPathEncodeRequest\n[       OK ] CancelUpdateComponent.errorPathEncodeRequest (5 ms)\n[ RUN      ] CancelUpdateComponent.testGoodDecodeResponse\n[       OK ] CancelUpdateComponent.testGoodDecodeResponse (9 ms)\n[ RUN      ] CancelUpdateComponent.testBadDecodeResponse\n[       OK ] CancelUpdateComponent.testBadDecodeResponse (6 ms)\n[----------] 4 tests from CancelUpdateComponent (32 ms total)\n\n[----------] 4 tests from CancelUpdate\n[ RUN      ] CancelUpdate.goodPathEncodeRequest\n[       OK ] CancelUpdate.goodPathEncodeRequest (5 ms)\n[ RUN      ] CancelUpdate.errorPathEncodeRequest\n[       OK ] CancelUpdate.errorPathEncodeRequest (9 ms)\n[ RUN      ] CancelUpdate.goodPathDecodeResponse\n[       OK ] CancelUpdate.goodPathDecodeResponse (40 ms)\n[ RUN      ] CancelUpdate.errorPathDecodeResponse\n[       OK ] CancelUpdate.errorPathDecodeResponse (22 ms)\n[----------] 4 tests from CancelUpdate (79 ms total)\n\n[----------] Global test environment tear-down\n[==========] 63 tests from 17 test suites ran. (1732 ms total)\n[  PASSED  ] 63 tests.\n", "result": "OK", "starttime": 1636192710.4092138, "duration": 5.996141195297241, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "48"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_firmware_update_test"], "stderr": "==1209== Memcheck, a memory error detector\n==1209== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1209== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1209== Command: /home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_firmware_update_test\n==1209== \n==1209== \n==1209== HEAP SUMMARY:\n==1209==     in use at exit: 0 bytes in 0 blocks\n==1209==   total heap usage: 1,472 allocs, 1,472 frees, 225,353 bytes allocated\n==1209== \n==1209== All heap blocks were freed -- no leaks are possible\n==1209== \n==1209== For lists of detected and suppressed errors, rerun with: -s\n==1209== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldm_bios_table_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 26 tests from 6 test suites.\n[----------] Global test environment set-up.\n[----------] 9 tests from AttrTable\n[ RUN      ] AttrTable.HeaderDecodeTest\n[       OK ] AttrTable.HeaderDecodeTest (72 ms)\n[ RUN      ] AttrTable.EnumEntryDecodeTest\n[       OK ] AttrTable.EnumEntryDecodeTest (309 ms)\n[ RUN      ] AttrTable.EnumEntryEncodeTest\n[       OK ] AttrTable.EnumEntryEncodeTest (747 ms)\n[ RUN      ] AttrTable.StringEntryDecodeTest\n[       OK ] AttrTable.StringEntryDecodeTest (80 ms)\n[ RUN      ] AttrTable.StringEntryEncodeTest\n[       OK ] AttrTable.StringEntryEncodeTest (237 ms)\n[ RUN      ] AttrTable.integerEntryEncodeTest\n[       OK ] AttrTable.integerEntryEncodeTest (227 ms)\n[ RUN      ] AttrTable.integerEntryDecodeTest\n[       OK ] AttrTable.integerEntryDecodeTest (19 ms)\n[ RUN      ] AttrTable.ItearatorTest\n[       OK ] AttrTable.ItearatorTest (157 ms)\n[ RUN      ] AttrTable.FindTest\n[       OK ] AttrTable.FindTest (130 ms)\n[----------] 9 tests from AttrTable (2014 ms total)\n\n[----------] 10 tests from AttrValTable\n[ RUN      ] AttrValTable.HeaderDecodeTest\n[       OK ] AttrValTable.HeaderDecodeTest (16 ms)\n[ RUN      ] AttrValTable.EnumEntryEncodeTest\n[       OK ] AttrValTable.EnumEntryEncodeTest (240 ms)\n[ RUN      ] AttrValTable.EnumEntryDecodeTest\n[       OK ] AttrValTable.EnumEntryDecodeTest (20 ms)\n[ RUN      ] AttrValTable.stringEntryEncodeTest\n[       OK ] AttrValTable.stringEntryEncodeTest (182 ms)\n[ RUN      ] AttrValTable.StringEntryDecodeTest\n[       OK ] AttrValTable.StringEntryDecodeTest (22 ms)\n[ RUN      ] AttrValTable.integerEntryEncodeTest\n[       OK ] AttrValTable.integerEntryEncodeTest (199 ms)\n[ RUN      ] AttrValTable.integerEntryDecodeTest\n[       OK ] AttrValTable.integerEntryDecodeTest (7 ms)\n[ RUN      ] AttrValTable.IteratorTest\n[       OK ] AttrValTable.IteratorTest (52 ms)\n[ RUN      ] AttrValTable.FindTest\n[       OK ] AttrValTable.FindTest (209 ms)\n[ RUN      ] AttrValTable.CopyAndUpdateTest\n[       OK ] AttrValTable.CopyAndUpdateTest (103 ms)\n[----------] 10 tests from AttrValTable (1070 ms total)\n\n[----------] 4 tests from StringTable\n[ RUN      ] StringTable.EntryEncodeTest\n[       OK ] StringTable.EntryEncodeTest (192 ms)\n[ RUN      ] StringTable.EntryDecodeTest\n[       OK ] StringTable.EntryDecodeTest (35 ms)\n[ RUN      ] StringTable.IteratorTest\n[       OK ] StringTable.IteratorTest (25 ms)\n[ RUN      ] StringTable.FindTest\n[       OK ] StringTable.FindTest (36 ms)\n[----------] 4 tests from StringTable (295 ms total)\n\n[----------] 1 test from Itearator\n[ RUN      ] Itearator.DeathTest\n[       OK ] Itearator.DeathTest (202 ms)\n[----------] 1 test from Itearator (203 ms total)\n\n[----------] 1 test from PadAndChecksum\n[ RUN      ] PadAndChecksum.PadAndChecksum\n[       OK ] PadAndChecksum.PadAndChecksum (24 ms)\n[----------] 1 test from PadAndChecksum (25 ms total)\n\n[----------] 1 test from BIOSTableChecksum\n[ RUN      ] BIOSTableChecksum.testBIOSTableChecksum\n[       OK ] BIOSTableChecksum.testBIOSTableChecksum (8 ms)\n[----------] 1 test from BIOSTableChecksum (9 ms total)\n\n[----------] Global test environment tear-down\n[==========] 26 tests from 6 test suites ran. (3694 ms total)\n[  PASSED  ] 26 tests.\n", "result": "OK", "starttime": 1636192710.3856223, "duration": 7.811928987503052, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "202"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_bios_table_test"], "stderr": "==1201== Memcheck, a memory error detector\n==1201== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1201== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1201== Command: /home/manojeda/ci_test_area/pldm/build/libpldm/tests/libpldm_bios_table_test\n==1201== \n==1219== \n==1219== Process terminating with default action of signal 6 (SIGABRT)\n==1219==    at 0x4BBF808: __pthread_kill_implementation (pthread_kill.c:44)\n==1219==    by 0x4BBF808: __pthread_kill_internal (pthread_kill.c:80)\n==1219==    by 0x4BBF808: pthread_kill@@GLIBC_2.34 (pthread_kill.c:91)\n==1219==    by 0x4B6B475: raise (raise.c:26)\n==1219==    by 0x4B517B6: abort (abort.c:79)\n==1219==    by 0x4B516DA: __assert_fail_base.cold (assert.c:92)\n==1219==    by 0x4B62E25: __assert_fail (assert.c:101)\n==1219==    by 0x4860991: pldm_bios_table_attr_entry_enum_encode (bios_table.c:171)\n==1219==    by 0x1159AE: AttrTable_EnumEntryEncodeTest_Test::TestBody() (libpldm_bios_table_test.cpp:173)\n==1219==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1219==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1219==    by 0x48C9165: Run (gtest.cc:2682)\n==1219==    by 0x48C9165: testing::Test::Run() (gtest.cc:2672)\n==1219==    by 0x48C92E4: Run (gtest.cc:2861)\n==1219==    by 0x48C92E4: testing::TestInfo::Run() (gtest.cc:2833)\n==1219==    by 0x48C98A8: Run (gtest.cc:3015)\n==1219==    by 0x48C98A8: testing::TestSuite::Run() (gtest.cc:2993)\n==1219==    by 0x48C9FEE: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\n==1219== \n==1219== HEAP SUMMARY:\n==1219==     in use at exit: 19,571 bytes in 241 blocks\n==1219==   total heap usage: 599 allocs, 358 frees, 154,597 bytes allocated\n==1219== \n==1219== LEAK SUMMARY:\n==1219==    definitely lost: 0 bytes in 0 blocks\n==1219==    indirectly lost: 0 bytes in 0 blocks\n==1219==      possibly lost: 0 bytes in 0 blocks\n==1219==    still reachable: 19,571 bytes in 241 blocks\n==1219==         suppressed: 0 bytes in 0 blocks\n==1219== Rerun with --leak-check=full to see details of leaked memory\n==1219== \n==1219== For lists of detected and suppressed errors, rerun with: -s\n==1219== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n==1222== \n==1222== Process terminating with default action of signal 6 (SIGABRT)\n==1222==    at 0x4BBF808: __pthread_kill_implementation (pthread_kill.c:44)\n==1222==    by 0x4BBF808: __pthread_kill_internal (pthread_kill.c:80)\n==1222==    by 0x4BBF808: pthread_kill@@GLIBC_2.34 (pthread_kill.c:91)\n==1222==    by 0x4B6B475: raise (raise.c:26)\n==1222==    by 0x4B517B6: abort (abort.c:79)\n==1222==    by 0x4B516DA: __assert_fail_base.cold (assert.c:92)\n==1222==    by 0x4B62E25: __assert_fail (assert.c:101)\n==1222==    by 0x4860EAA: pldm_bios_table_attr_entry_string_encode (bios_table.c:319)\n==1222==    by 0x1178C1: AttrTable_StringEntryEncodeTest_Test::TestBody() (libpldm_bios_table_test.cpp:280)\n==1222==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1222==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1222==    by 0x48C9165: Run (gtest.cc:2682)\n==1222==    by 0x48C9165: testing::Test::Run() (gtest.cc:2672)\n==1222==    by 0x48C92E4: Run (gtest.cc:2861)\n==1222==    by 0x48C92E4: testing::TestInfo::Run() (gtest.cc:2833)\n==1222==    by 0x48C98A8: Run (gtest.cc:3015)\n==1222==    by 0x48C98A8: testing::TestSuite::Run() (gtest.cc:2993)\n==1222==    by 0x48C9FEE: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\n==1222== \n==1222== HEAP SUMMARY:\n==1222==     in use at exit: 19,676 bytes in 240 blocks\n==1222==   total heap usage: 908 allocs, 668 frees, 237,134 bytes allocated\n==1222== \n==1222== LEAK SUMMARY:\n==1222==    definitely lost: 0 bytes in 0 blocks\n==1222==    indirectly lost: 0 bytes in 0 blocks\n==1222==      possibly lost: 0 bytes in 0 blocks\n==1222==    still reachable: 19,676 bytes in 240 blocks\n==1222==         suppressed: 0 bytes in 0 blocks\n==1222== Rerun with --leak-check=full to see details of leaked memory\n==1222== \n==1222== For lists of detected and suppressed errors, rerun with: -s\n==1222== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n==1225== \n==1225== Process terminating with default action of signal 6 (SIGABRT)\n==1225==    at 0x4BBF808: __pthread_kill_implementation (pthread_kill.c:44)\n==1225==    by 0x4BBF808: __pthread_kill_internal (pthread_kill.c:80)\n==1225==    by 0x4BBF808: pthread_kill@@GLIBC_2.34 (pthread_kill.c:91)\n==1225==    by 0x4B6B475: raise (raise.c:26)\n==1225==    by 0x4B517B6: abort (abort.c:79)\n==1225==    by 0x4B516DA: __assert_fail_base.cold (assert.c:92)\n==1225==    by 0x4B62E25: __assert_fail (assert.c:101)\n==1225==    by 0x48613AB: pldm_bios_table_attr_entry_integer_encode (bios_table.c:471)\n==1225==    by 0x118DFE: AttrTable_integerEntryEncodeTest_Test::TestBody() (libpldm_bios_table_test.cpp:367)\n==1225==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1225==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1225==    by 0x48C9165: Run (gtest.cc:2682)\n==1225==    by 0x48C9165: testing::Test::Run() (gtest.cc:2672)\n==1225==    by 0x48C92E4: Run (gtest.cc:2861)\n==1225==    by 0x48C92E4: testing::TestInfo::Run() (gtest.cc:2833)\n==1225==    by 0x48C98A8: Run (gtest.cc:3015)\n==1225==    by 0x48C98A8: testing::TestSuite::Run() (gtest.cc:2993)\n==1225==    by 0x48C9FEE: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\n==1225== \n==1225== HEAP SUMMARY:\n==1225==     in use at exit: 19,820 bytes in 242 blocks\n==1225==   total heap usage: 1,215 allocs, 973 frees, 319,161 bytes allocated\n==1225== \n==1225== LEAK SUMMARY:\n==1225==    definitely lost: 0 bytes in 0 blocks\n==1225==    indirectly lost: 0 bytes in 0 blocks\n==1225==      possibly lost: 0 bytes in 0 blocks\n==1225==    still reachable: 19,820 bytes in 242 blocks\n==1225==         suppressed: 0 bytes in 0 blocks\n==1225== Rerun with --leak-check=full to see details of leaked memory\n==1225== \n==1225== For lists of detected and suppressed errors, rerun with: -s\n==1225== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n==1228== \n==1228== Process terminating with default action of signal 6 (SIGABRT)\n==1228==    at 0x4BBF808: __pthread_kill_implementation (pthread_kill.c:44)\n==1228==    by 0x4BBF808: __pthread_kill_internal (pthread_kill.c:80)\n==1228==    by 0x4BBF808: pthread_kill@@GLIBC_2.34 (pthread_kill.c:91)\n==1228==    by 0x4B6B475: raise (raise.c:26)\n==1228==    by 0x4B517B6: abort (abort.c:79)\n==1228==    by 0x4B516DA: __assert_fail_base.cold (assert.c:92)\n==1228==    by 0x4B62E25: __assert_fail (assert.c:101)\n==1228==    by 0x48618E6: pldm_bios_table_attr_value_entry_encode_enum (bios_table.c:627)\n==1228==    by 0x11BE7B: AttrValTable_EnumEntryEncodeTest_Test::TestBody() (libpldm_bios_table_test.cpp:573)\n==1228==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1228==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1228==    by 0x48C9165: Run (gtest.cc:2682)\n==1228==    by 0x48C9165: testing::Test::Run() (gtest.cc:2672)\n==1228==    by 0x48C92E4: Run (gtest.cc:2861)\n==1228==    by 0x48C92E4: testing::TestInfo::Run() (gtest.cc:2833)\n==1228==    by 0x48C98A8: Run (gtest.cc:3015)\n==1228==    by 0x48C98A8: testing::TestSuite::Run() (gtest.cc:2993)\n==1228==    by 0x48C9FEE: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\n==1228== \n==1228== HEAP SUMMARY:\n==1228==     in use at exit: 19,761 bytes in 240 blocks\n==1228==   total heap usage: 1,578 allocs, 1,338 frees, 408,138 bytes allocated\n==1228== \n==1228== LEAK SUMMARY:\n==1228==    definitely lost: 0 bytes in 0 blocks\n==1228==    indirectly lost: 0 bytes in 0 blocks\n==1228==      possibly lost: 0 bytes in 0 blocks\n==1228==    still reachable: 19,761 bytes in 240 blocks\n==1228==         suppressed: 0 bytes in 0 blocks\n==1228== Rerun with --leak-check=full to see details of leaked memory\n==1228== \n==1228== For lists of detected and suppressed errors, rerun with: -s\n==1228== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n==1229== \n==1229== Process terminating with default action of signal 6 (SIGABRT)\n==1229==    at 0x4BBF808: __pthread_kill_implementation (pthread_kill.c:44)\n==1229==    by 0x4BBF808: __pthread_kill_internal (pthread_kill.c:80)\n==1229==    by 0x4BBF808: pthread_kill@@GLIBC_2.34 (pthread_kill.c:91)\n==1229==    by 0x4B6B475: raise (raise.c:26)\n==1229==    by 0x4B517B6: abort (abort.c:79)\n==1229==    by 0x4B516DA: __assert_fail_base.cold (assert.c:92)\n==1229==    by 0x4B62E25: __assert_fail (assert.c:101)\n==1229==    by 0x4861B0C: pldm_bios_table_attr_value_entry_encode_string (bios_table.c:691)\n==1229==    by 0x11D42F: AttrValTable_stringEntryEncodeTest_Test::TestBody() (libpldm_bios_table_test.cpp:640)\n==1229==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1229==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1229==    by 0x48C9165: Run (gtest.cc:2682)\n==1229==    by 0x48C9165: testing::Test::Run() (gtest.cc:2672)\n==1229==    by 0x48C92E4: Run (gtest.cc:2861)\n==1229==    by 0x48C92E4: testing::TestInfo::Run() (gtest.cc:2833)\n==1229==    by 0x48C98A8: Run (gtest.cc:3015)\n==1229==    by 0x48C98A8: testing::TestSuite::Run() (gtest.cc:2993)\n==1229==    by 0x48C9FEE: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\n==1229== \n==1229== HEAP SUMMARY:\n==1229==     in use at exit: 19,765 bytes in 240 blocks\n==1229==   total heap usage: 1,886 allocs, 1,646 frees, 490,609 bytes allocated\n==1229== \n==1229== LEAK SUMMARY:\n==1229==    definitely lost: 0 bytes in 0 blocks\n==1229==    indirectly lost: 0 bytes in 0 blocks\n==1229==      possibly lost: 0 bytes in 0 blocks\n==1229==    still reachable: 19,765 bytes in 240 blocks\n==1229==         suppressed: 0 bytes in 0 blocks\n==1229== Rerun with --leak-check=full to see details of leaked memory\n==1229== \n==1229== For lists of detected and suppressed errors, rerun with: -s\n==1229== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n==1230== \n==1230== Process terminating with default action of signal 6 (SIGABRT)\n==1230==    at 0x4BBF808: __pthread_kill_implementation (pthread_kill.c:44)\n==1230==    by 0x4BBF808: __pthread_kill_internal (pthread_kill.c:80)\n==1230==    by 0x4BBF808: pthread_kill@@GLIBC_2.34 (pthread_kill.c:91)\n==1230==    by 0x4B6B475: raise (raise.c:26)\n==1230==    by 0x4B517B6: abort (abort.c:79)\n==1230==    by 0x4B516DA: __assert_fail_base.cold (assert.c:92)\n==1230==    by 0x4B62E25: __assert_fail (assert.c:101)\n==1230==    by 0x4861D69: pldm_bios_table_attr_value_entry_encode_integer (bios_table.c:758)\n==1230==    by 0x11EAEE: AttrValTable_integerEntryEncodeTest_Test::TestBody() (libpldm_bios_table_test.cpp:710)\n==1230==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1230==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1230==    by 0x48C9165: Run (gtest.cc:2682)\n==1230==    by 0x48C9165: testing::Test::Run() (gtest.cc:2672)\n==1230==    by 0x48C92E4: Run (gtest.cc:2861)\n==1230==    by 0x48C92E4: testing::TestInfo::Run() (gtest.cc:2833)\n==1230==    by 0x48C98A8: Run (gtest.cc:3015)\n==1230==    by 0x48C98A8: testing::TestSuite::Run() (gtest.cc:2993)\n==1230==    by 0x48C9FEE: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\n==1230== \n==1230== HEAP SUMMARY:\n==1230==     in use at exit: 19,771 bytes in 240 blocks\n==1230==   total heap usage: 2,204 allocs, 1,964 frees, 573,416 bytes allocated\n==1230== \n==1230== LEAK SUMMARY:\n==1230==    definitely lost: 0 bytes in 0 blocks\n==1230==    indirectly lost: 0 bytes in 0 blocks\n==1230==      possibly lost: 0 bytes in 0 blocks\n==1230==    still reachable: 19,771 bytes in 240 blocks\n==1230==         suppressed: 0 bytes in 0 blocks\n==1230== Rerun with --leak-check=full to see details of leaked memory\n==1230== \n==1230== For lists of detected and suppressed errors, rerun with: -s\n==1230== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n==1231== \n==1231== Process terminating with default action of signal 6 (SIGABRT)\n==1231==    at 0x4BBF808: __pthread_kill_implementation (pthread_kill.c:44)\n==1231==    by 0x4BBF808: __pthread_kill_internal (pthread_kill.c:80)\n==1231==    by 0x4BBF808: pthread_kill@@GLIBC_2.34 (pthread_kill.c:91)\n==1231==    by 0x4B6B475: raise (raise.c:26)\n==1231==    by 0x4B517B6: abort (abort.c:79)\n==1231==    by 0x4B516DA: __assert_fail_base.cold (assert.c:92)\n==1231==    by 0x4B62E25: __assert_fail (assert.c:101)\n==1231==    by 0x4861F23: attr_value_table_entry_length (bios_table.c:820)\n==1231==    by 0x48622B8: pldm_bios_table_iter_next (bios_table.c:935)\n==1231==    by 0x4862347: pldm_bios_table_entry_find_by_iter (bios_table.c:954)\n==1231==    by 0x48623B1: pldm_bios_table_entry_find_from_table (bios_table.c:967)\n==1231==    by 0x48626B2: pldm_bios_table_attr_value_find_by_handle (bios_table.c:1059)\n==1231==    by 0x120D4A: AttrValTable_FindTest_Test::TestBody() (libpldm_bios_table_test.cpp:845)\n==1231==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1231==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1231== \n==1231== HEAP SUMMARY:\n==1231==     in use at exit: 19,532 bytes in 239 blocks\n==1231==   total heap usage: 2,582 allocs, 2,343 frees, 660,285 bytes allocated\n==1231== \n==1231== LEAK SUMMARY:\n==1231==    definitely lost: 0 bytes in 0 blocks\n==1231==    indirectly lost: 0 bytes in 0 blocks\n==1231==      possibly lost: 0 bytes in 0 blocks\n==1231==    still reachable: 19,532 bytes in 239 blocks\n==1231==         suppressed: 0 bytes in 0 blocks\n==1231== Rerun with --leak-check=full to see details of leaked memory\n==1231== \n==1231== For lists of detected and suppressed errors, rerun with: -s\n==1231== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n==1232== \n==1232== Process terminating with default action of signal 6 (SIGABRT)\n==1232==    at 0x4BBF808: __pthread_kill_implementation (pthread_kill.c:44)\n==1232==    by 0x4BBF808: __pthread_kill_internal (pthread_kill.c:80)\n==1232==    by 0x4BBF808: pthread_kill@@GLIBC_2.34 (pthread_kill.c:91)\n==1232==    by 0x4B6B475: raise (raise.c:26)\n==1232==    by 0x4B517B6: abort (abort.c:79)\n==1232==    by 0x4B516DA: __assert_fail_base.cold (assert.c:92)\n==1232==    by 0x4B62E25: __assert_fail (assert.c:101)\n==1232==    by 0x4860584: pldm_bios_table_string_entry_encode (bios_table.c:55)\n==1232==    by 0x122D02: StringTable_EntryEncodeTest_Test::TestBody() (libpldm_bios_table_test.cpp:967)\n==1232==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1232==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1232==    by 0x48C9165: Run (gtest.cc:2682)\n==1232==    by 0x48C9165: testing::Test::Run() (gtest.cc:2672)\n==1232==    by 0x48C92E4: Run (gtest.cc:2861)\n==1232==    by 0x48C92E4: testing::TestInfo::Run() (gtest.cc:2833)\n==1232==    by 0x48C98A8: Run (gtest.cc:3015)\n==1232==    by 0x48C98A8: testing::TestSuite::Run() (gtest.cc:2993)\n==1232==    by 0x48C9FEE: testing::internal::UnitTestImpl::RunAllTests() (gtest.cc:5855)\n==1232== \n==1232== HEAP SUMMARY:\n==1232==     in use at exit: 19,771 bytes in 240 blocks\n==1232==   total heap usage: 2,932 allocs, 2,692 frees, 747,779 bytes allocated\n==1232== \n==1232== LEAK SUMMARY:\n==1232==    definitely lost: 0 bytes in 0 blocks\n==1232==    indirectly lost: 0 bytes in 0 blocks\n==1232==      possibly lost: 0 bytes in 0 blocks\n==1232==    still reachable: 19,771 bytes in 240 blocks\n==1232==         suppressed: 0 bytes in 0 blocks\n==1232== Rerun with --leak-check=full to see details of leaked memory\n==1232== \n==1232== For lists of detected and suppressed errors, rerun with: -s\n==1232== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n==1233== \n==1233== Process terminating with default action of signal 6 (SIGABRT)\n==1233==    at 0x4BBF808: __pthread_kill_implementation (pthread_kill.c:44)\n==1233==    by 0x4BBF808: __pthread_kill_internal (pthread_kill.c:80)\n==1233==    by 0x4BBF808: pthread_kill@@GLIBC_2.34 (pthread_kill.c:91)\n==1233==    by 0x4B6B475: raise (raise.c:26)\n==1233==    by 0x4B517B6: abort (abort.c:79)\n==1233==    by 0x4B516DA: __assert_fail_base.cold (assert.c:92)\n==1233==    by 0x4B62E25: __assert_fail (assert.c:101)\n==1233==    by 0x48617E0: attr_table_entry_length (bios_table.c:597)\n==1233==    by 0x48622B8: pldm_bios_table_iter_next (bios_table.c:935)\n==1233==    by 0x1254DF: Itearator_DeathTest_Test::TestBody() (libpldm_bios_table_test.cpp:1098)\n==1233==    by 0x48D5F9E: HandleSehExceptionsInMethodIfSupported<testing::Test, void> (gtest.cc:2607)\n==1233==    by 0x48D5F9E: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (gtest.cc:2643)\n==1233==    by 0x48C9165: Run (gtest.cc:2682)\n==1233==    by 0x48C9165: testing::Test::Run() (gtest.cc:2672)\n==1233==    by 0x48C92E4: Run (gtest.cc:2861)\n==1233==    by 0x48C92E4: testing::TestInfo::Run() (gtest.cc:2833)\n==1233==    by 0x48C98A8: Run (gtest.cc:3015)\n==1233==    by 0x48C98A8: testing::TestSuite::Run() (gtest.cc:2993)\n==1233== \n==1233== HEAP SUMMARY:\n==1233==     in use at exit: 20,367 bytes in 244 blocks\n==1233==   total heap usage: 3,271 allocs, 3,027 frees, 834,734 bytes allocated\n==1233== \n==1233== LEAK SUMMARY:\n==1233==    definitely lost: 0 bytes in 0 blocks\n==1233==    indirectly lost: 0 bytes in 0 blocks\n==1233==      possibly lost: 0 bytes in 0 blocks\n==1233==    still reachable: 20,367 bytes in 244 blocks\n==1233==         suppressed: 0 bytes in 0 blocks\n==1233== Rerun with --leak-check=full to see details of leaked memory\n==1233== \n==1233== For lists of detected and suppressed errors, rerun with: -s\n==1233== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n==1201== \n==1201== HEAP SUMMARY:\n==1201==     in use at exit: 0 bytes in 0 blocks\n==1201==   total heap usage: 3,469 allocs, 3,469 frees, 900,709 bytes allocated\n==1201== \n==1201== All heap blocks were freed -- no leaks are possible\n==1201== \n==1201== For lists of detected and suppressed errors, rerun with: -s\n==1201== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_bios_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 2 tests from 2 test suites.\n[----------] Global test environment set-up.\n[----------] 1 test from epochToBCDTime\n[ RUN      ] epochToBCDTime.testTime\n[       OK ] epochToBCDTime.testTime (131 ms)\n[----------] 1 test from epochToBCDTime (149 ms total)\n\n[----------] 1 test from timeToEpoch\n[ RUN      ] timeToEpoch.testTime0\n[       OK ] timeToEpoch.testTime0 (10 ms)\n[----------] 1 test from timeToEpoch (11 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 2 test suites ran. (238 ms total)\n[  PASSED  ] 2 tests.\n", "result": "OK", "starttime": 1636192714.3848965, "duration": 8.449687242507935, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "81"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_test"], "stderr": "==1213== Memcheck, a memory error detector\n==1213== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1213== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1213== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_test\n==1213== \n==1213== \n==1213== HEAP SUMMARY:\n==1213==     in use at exit: 0 bytes in 0 blocks\n==1213==   total heap usage: 235 allocs, 235 frees, 124,123 bytes allocated\n==1213== \n==1213== All heap blocks were freed -- no leaks are possible\n==1213== \n==1213== For lists of detected and suppressed errors, rerun with: -s\n==1213== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_base_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 6 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 6 tests from TestBaseCommands\n[ RUN      ] TestBaseCommands.testPLDMTypesGoodRequest\n[       OK ] TestBaseCommands.testPLDMTypesGoodRequest (599 ms)\n[ RUN      ] TestBaseCommands.testGetPLDMCommandsGoodRequest\n[       OK ] TestBaseCommands.testGetPLDMCommandsGoodRequest (36 ms)\n[ RUN      ] TestBaseCommands.testGetPLDMCommandsBadRequest\n[       OK ] TestBaseCommands.testGetPLDMCommandsBadRequest (16 ms)\n[ RUN      ] TestBaseCommands.testGetPLDMVersionGoodRequest\n[       OK ] TestBaseCommands.testGetPLDMVersionGoodRequest (29 ms)\n[ RUN      ] TestBaseCommands.testGetPLDMVersionBadRequest\n[       OK ] TestBaseCommands.testGetPLDMVersionBadRequest (22 ms)\n[ RUN      ] TestBaseCommands.testGetTIDGoodRequest\n[       OK ] TestBaseCommands.testGetTIDGoodRequest (190 ms)\n[----------] 6 tests from TestBaseCommands (910 ms total)\n\n[----------] Global test environment tear-down\n[==========] 6 tests from 1 test suite ran. (987 ms total)\n[  PASSED  ] 6 tests.\n", "result": "OK", "starttime": 1636192713.912312, "duration": 9.129729509353638, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "219"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_base_test"], "stderr": "==1211== Memcheck, a memory error detector\n==1211== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1211== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1211== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_base_test\n==1211== \n==1211== \n==1211== HEAP SUMMARY:\n==1211==     in use at exit: 0 bytes in 0 blocks\n==1211==   total heap usage: 474 allocs, 474 frees, 142,152 bytes allocated\n==1211== \n==1211== All heap blocks were freed -- no leaks are possible\n==1211== \n==1211== For lists of detected and suppressed errors, rerun with: -s\n==1211== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_bios_attribute_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from BIOSAttribute\n[ RUN      ] BIOSAttribute.CtorTest\n[       OK ] BIOSAttribute.CtorTest (946 ms)\n[----------] 1 test from BIOSAttribute (960 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test suite ran. (1074 ms total)\n[  PASSED  ] 1 test.\n", "result": "OK", "starttime": 1636192714.448784, "duration": 9.772131443023682, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "147"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_attribute_test"], "stderr": "==1215== Memcheck, a memory error detector\n==1215== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1215== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1215== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_attribute_test\n==1215== \n==1215== \n==1215== HEAP SUMMARY:\n==1215==     in use at exit: 0 bytes in 0 blocks\n==1215==   total heap usage: 322 allocs, 322 frees, 121,983 bytes allocated\n==1215== \n==1215== All heap blocks were freed -- no leaks are possible\n==1215== \n==1215== For lists of detected and suppressed errors, rerun with: -s\n==1215== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_bios_integer_attribute_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 3 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 3 tests from TestBIOSIntegerAttribute\n[ RUN      ] TestBIOSIntegerAttribute.CtorTest\n[       OK ] TestBIOSIntegerAttribute.CtorTest (816 ms)\n[ RUN      ] TestBIOSIntegerAttribute.ConstructEntry\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_integer_attribute_test.cpp:120:\n    Function call: findHandle(@0x1fff000428 \"VDD_AVSBUS_RAIL\")\n          Returns: 5\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_integer_attribute_test.cpp:120:\n    Function call: findHandle(@0x1fff000548 \"VDD_AVSBUS_RAIL\")\n          Returns: 5\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_integer_attribute_test.cpp:120:\n    Function call: findHandle(@0x1fff000548 \"VDD_AVSBUS_RAIL\")\n          Returns: 5\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n[       OK ] TestBIOSIntegerAttribute.ConstructEntry (1291 ms)\n[ RUN      ] TestBIOSIntegerAttribute.setAttrValueOnDbus\n[       OK ] TestBIOSIntegerAttribute.setAttrValueOnDbus (180 ms)\n[----------] 3 tests from TestBIOSIntegerAttribute (2301 ms total)\n\n[----------] Global test environment tear-down\n[==========] 3 tests from 1 test suite ran. (2392 ms total)\n[  PASSED  ] 3 tests.\n", "result": "OK", "starttime": 1636192715.738998, "duration": 10.6334810256958, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "144"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_integer_attribute_test"], "stderr": "==1223== Memcheck, a memory error detector\n==1223== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1223== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1223== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_integer_attribute_test\n==1223== \nGet Integer Attribute Value Error: AttributeName = VDD_AVSBUS_RAIL\n==1223== \n==1223== HEAP SUMMARY:\n==1223==     in use at exit: 0 bytes in 0 blocks\n==1223==   total heap usage: 785 allocs, 785 frees, 172,542 bytes allocated\n==1223== \n==1223== All heap blocks were freed -- no leaks are possible\n==1223== \n==1223== For lists of detected and suppressed errors, rerun with: -s\n==1223== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_bios_table_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 2 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 2 tests from TestBIOSTable\n[ RUN      ] TestBIOSTable.testStoreLoad\n[       OK ] TestBIOSTable.testStoreLoad (470 ms)\n[ RUN      ] TestBIOSTable.testLoadOntoExisting\n[       OK ] TestBIOSTable.testLoadOntoExisting (27 ms)\n[----------] 2 tests from TestBIOSTable (516 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test suite ran. (607 ms total)\n[  PASSED  ] 2 tests.\n", "result": "OK", "starttime": 1636192718.200431, "duration": 9.062465190887451, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "49"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_table_test"], "stderr": "==1234== Memcheck, a memory error detector\n==1234== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1234== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1234== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_table_test\n==1234== \n==1234== \n==1234== HEAP SUMMARY:\n==1234==     in use at exit: 0 bytes in 0 blocks\n==1234==   total heap usage: 343 allocs, 343 frees, 226,417 bytes allocated\n==1234== \n==1234== All heap blocks were freed -- no leaks are possible\n==1234== \n==1234== For lists of detected and suppressed errors, rerun with: -s\n==1234== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_bios_enum_attribute_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 3 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 3 tests from TestBIOSEnumAttribute\n[ RUN      ] TestBIOSEnumAttribute.CtorTest\n[       OK ] TestBIOSEnumAttribute.CtorTest (1375 ms)\n[ RUN      ] TestBIOSEnumAttribute.ConstructEntry\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:120:\n    Function call: findHandle(@0x5d75f70 \"Concurrent\")\n          Returns: 2\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:122:\n    Function call: findHandle(@0x5d75f90 \"Disruptive\")\n          Returns: 3\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:124:\n    Function call: findHandle(@0x1fff0003b8 \"CodeUpdatePolicy\")\n          Returns: 4\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:120:\n    Function call: findHandle(@0x5d7dd20 \"Concurrent\")\n          Returns: 2\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:122:\n    Function call: findHandle(@0x5d7dd40 \"Disruptive\")\n          Returns: 3\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:124:\n    Function call: findHandle(@0x1fff000528 \"CodeUpdatePolicy\")\n          Returns: 4\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:120:\n    Function call: findHandle(@0x5d7dd20 \"Concurrent\")\n          Returns: 2\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:122:\n    Function call: findHandle(@0x5d7dd40 \"Disruptive\")\n          Returns: 3\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:124:\n    Function call: findHandle(@0x1fff000528 \"CodeUpdatePolicy\")\n          Returns: 4\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n[       OK ] TestBIOSEnumAttribute.ConstructEntry (1223 ms)\n[ RUN      ] TestBIOSEnumAttribute.setAttrValueOnDbus\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_enum_attribute_test.cpp:214:\n    Function call: findString(2)\n          Returns: \"Concurrent\"\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n[       OK ] TestBIOSEnumAttribute.setAttrValueOnDbus (432 ms)\n[----------] 3 tests from TestBIOSEnumAttribute (3046 ms total)\n\n[----------] Global test environment tear-down\n[==========] 3 tests from 1 test suite ran. (3162 ms total)\n[  PASSED  ] 3 tests.\n", "result": "OK", "starttime": 1636192715.454592, "duration": 12.713575601577759, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "55"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_enum_attribute_test"], "stderr": "==1220== Memcheck, a memory error detector\n==1220== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1220== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1220== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_enum_attribute_test\n==1220== \n==1220== \n==1220== HEAP SUMMARY:\n==1220==     in use at exit: 0 bytes in 0 blocks\n==1220==   total heap usage: 1,093 allocs, 1,093 frees, 190,258 bytes allocated\n==1220== \n==1220== All heap blocks were freed -- no leaks are possible\n==1220== \n==1220== For lists of detected and suppressed errors, rerun with: -s\n==1220== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_bios_string_attribute_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 3 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 3 tests from TestBIOSStringAttribute\n[ RUN      ] TestBIOSStringAttribute.CtorTest\n[       OK ] TestBIOSStringAttribute.CtorTest (815 ms)\n[ RUN      ] TestBIOSStringAttribute.ConstructEntry\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_string_attribute_test.cpp:125:\n    Function call: findHandle(@0x1fff000438 \"str_example1\")\n          Returns: 5\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_string_attribute_test.cpp:125:\n    Function call: findHandle(@0x1fff000568 \"str_example1\")\n          Returns: 5\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - taking default action specified at:\n../libpldmresponder/test/libpldmresponder_bios_string_attribute_test.cpp:125:\n    Function call: findHandle(@0x1fff000568 \"str_example1\")\n          Returns: 5\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n[       OK ] TestBIOSStringAttribute.ConstructEntry (1187 ms)\n[ RUN      ] TestBIOSStringAttribute.setAttrValueOnDbus\n[       OK ] TestBIOSStringAttribute.setAttrValueOnDbus (237 ms)\n[----------] 3 tests from TestBIOSStringAttribute (2259 ms total)\n\n[----------] Global test environment tear-down\n[==========] 3 tests from 1 test suite ran. (2359 ms total)\n[  PASSED  ] 3 tests.\n", "result": "OK", "starttime": 1636192716.4157352, "duration": 11.893311500549316, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "188"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_string_attribute_test"], "stderr": "==1226== Memcheck, a memory error detector\n==1226== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1226== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1226== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_string_attribute_test\n==1226== \nGet String Attribute Value Error: AttributeName = str_example1\n==1226== \n==1226== HEAP SUMMARY:\n==1226==     in use at exit: 0 bytes in 0 blocks\n==1226==   total heap usage: 798 allocs, 798 frees, 163,851 bytes allocated\n==1226== \n==1226== All heap blocks were freed -- no leaks are possible\n==1226== \n==1226== For lists of detected and suppressed errors, rerun with: -s\n==1226== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_bios_config_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 2 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 2 tests from TestBIOSConfig\n[ RUN      ] TestBIOSConfig.buildTablesTest\n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getService(0x4c9b6e8 pointing to \"/xyz/openbmc_project/bios_config/manager\", 0x4c9b718 pointing to \"xyz.openbmc_project.BIOSConfig.Manager\")\n          Returns: \"\"\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\nsetBIOSTable:: updateBaseBIOSTableProperty() \n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getService(0x4c9b6e8 pointing to \"/xyz/openbmc_project/bios_config/manager\", 0x4c9b718 pointing to \"xyz.openbmc_project.BIOSConfig.Manager\")\n          Returns: \"\"\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n[       OK ] TestBIOSConfig.buildTablesTest (3898 ms)\n[ RUN      ] TestBIOSConfig.setAttrValue\n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getService(0x4c9b6e8 pointing to \"/xyz/openbmc_project/bios_config/manager\", 0x4c9b718 pointing to \"xyz.openbmc_project.BIOSConfig.Manager\")\n          Returns: \"\"\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getDbusPropertyVariant(0x5e83fa0 pointing to \"/xyz/abc/def\", 0x5e83fe0 pointing to \"Str_example1\", 0x5e841c0 pointing to \"xyz.openbmc_project.str_example1.value\")\n          Returns: ('bool(index = 0)' with value false)\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getDbusPropertyVariant(0x5e86910 pointing to \"/xyz/abc/def\", 0x5e86950 pointing to \"Str_example2\", 0x5e86b30 pointing to \"xyz.openbmc_project.str_example2.value\")\n          Returns: ('bool(index = 0)' with value false)\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getDbusPropertyVariant(0x5e8ff70 pointing to \"/xyz/openbmc_project/avsbus\", 0x5e8fd50 pointing to \"Rail\", 0x5e8ffd0 pointing to \"xyz.openbmc.AvsBus.Manager\")\n          Returns: ('bool(index = 0)' with value false)\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getDbusPropertyVariant(0x5e9d0e0 pointing to \"/xyz/abc/def\", 0x5e9d120 pointing to \"State\", 0x5e9d340 pointing to \"xyz.openbmc_project.HMCManaged.State\")\n          Returns: ('bool(index = 0)' with value false)\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getDbusPropertyVariant(0x5e9fb80 pointing to \"/xyz/abc/def\", 0x5e9fbc0 pointing to \"Side\", 0x5e9fdd0 pointing to \"xyz.openbmc.FWBoot.Side\")\n          Returns: ('bool(index = 0)' with value false)\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getDbusPropertyVariant(0x5ea20e0 pointing to \"/xyz/abc/def\", 0x5ea2120 pointing to \"Policy\", 0x5ea2390 pointing to \"xyz.openbmc.InBandCodeUpdate\")\n          Returns: ('bool(index = 0)' with value false)\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\nsetBIOSTable:: updateBaseBIOSTableProperty() \n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getService(0x4c9b6e8 pointing to \"/xyz/openbmc_project/bios_config/manager\", 0x4c9b718 pointing to \"xyz.openbmc_project.BIOSConfig.Manager\")\n          Returns: \"\"\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\nsetBIOSTable:: updateBaseBIOSTableProperty() \n\nGMOCK WARNING:\nUninteresting mock function call - returning default value.\n    Function call: getService(0x4c9b6e8 pointing to \"/xyz/openbmc_project/bios_config/manager\", 0x4c9b718 pointing to \"xyz.openbmc_project.BIOSConfig.Manager\")\n          Returns: \"\"\nNOTE: You can safely ignore the above warning unless this call should not happen.  Do not suppress it by blindly adding an EXPECT_CALL() if you don't mean to enforce the call.  See https://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#knowing-when-to-expect for details.\n[       OK ] TestBIOSConfig.setAttrValue (1080 ms)\n[----------] 2 tests from TestBIOSConfig (4993 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test suite ran. (6093 ms total)\n[  PASSED  ] 2 tests.\n", "result": "OK", "starttime": 1636192715.016782, "duration": 14.933870315551758, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "14"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_config_test"], "stderr": "==1217== Memcheck, a memory error detector\n==1217== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1217== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1217== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_bios_config_test\n==1217== \nFailed to read BaseBIOSTable property, ERROR=sd_bus_message_new_method_call: org.freedesktop.DBus.Error.InvalidArgs: Invalid argument\nGet String Attribute Value Error: AttributeName = str_example1\nGet String Attribute Value Error: AttributeName = str_example2\nGet Integer Attribute Value Error: AttributeName = VDD_AVSBUS_RAIL\nfailed to update BaseBIOSTable property, ERROR=sd_bus_message_new_method_call: org.freedesktop.DBus.Error.InvalidArgs: Invalid argument\nFailed to read BaseBIOSTable property, ERROR=sd_bus_message_new_method_call: org.freedesktop.DBus.Error.InvalidArgs: Invalid argument\nGet String Attribute Value Error: AttributeName = str_example1\nGet String Attribute Value Error: AttributeName = str_example2\nGet Integer Attribute Value Error: AttributeName = VDD_AVSBUS_RAIL\nfailed to update BaseBIOSTable property, ERROR=sd_bus_message_new_method_call: org.freedesktop.DBus.Error.InvalidArgs: Invalid argument\nfailed to update BaseBIOSTable property, ERROR=sd_bus_message_new_method_call: org.freedesktop.DBus.Error.InvalidArgs: Invalid argument\n==1217== \n==1217== HEAP SUMMARY:\n==1217==     in use at exit: 0 bytes in 0 blocks\n==1217==   total heap usage: 10,621 allocs, 10,621 frees, 1,138,028 bytes allocated\n==1217== \n==1217== All heap blocks were freed -- no leaks are possible\n==1217== \n==1217== For lists of detected and suppressed errors, rerun with: -s\n==1217== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_fru_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 1 test from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 1 test from FruParser\n[ RUN      ] FruParser.allScenarios\n[       OK ] FruParser.allScenarios (1551 ms)\n[----------] 1 test from FruParser (1562 ms total)\n\n[----------] Global test environment tear-down\n[==========] 1 test from 1 test suite ran. (1625 ms total)\n[  PASSED  ] 1 test.\n", "result": "OK", "starttime": 1636192722.8395674, "duration": 10.34676718711853, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "154"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_fru_test"], "stderr": "==1236== Memcheck, a memory error detector\n==1236== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1236== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1236== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_fru_test\n==1236== \n==1236== \n==1236== HEAP SUMMARY:\n==1236==     in use at exit: 0 bytes in 0 blocks\n==1236==   total heap usage: 1,437 allocs, 1,437 frees, 317,972 bytes allocated\n==1236== \n==1236== All heap blocks were freed -- no leaks are possible\n==1236== \n==1236== For lists of detected and suppressed errors, rerun with: -s\n==1236== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "pldm_utils_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 23 tests from 5 test suites.\n[----------] Global test environment set-up.\n[----------] 2 tests from decodeDate\n[ RUN      ] decodeDate.testGooduintToDate\n[       OK ] decodeDate.testGooduintToDate (28 ms)\n[ RUN      ] decodeDate.testBaduintToDate\n[       OK ] decodeDate.testBaduintToDate (3 ms)\n[----------] 2 tests from decodeDate (44 ms total)\n\n[----------] 2 tests from parseEffecterData\n[ RUN      ] parseEffecterData.testGoodDecodeEffecterData\n[       OK ] parseEffecterData.testGoodDecodeEffecterData (76 ms)\n[ RUN      ] parseEffecterData.testBadDecodeEffecterData\n[       OK ] parseEffecterData.testBadDecodeEffecterData (8 ms)\n[----------] 2 tests from parseEffecterData (86 ms total)\n\n[----------] 9 tests from FindStateEffecterPDR\n[ RUN      ] FindStateEffecterPDR.testOneMatch\n[       OK ] FindStateEffecterPDR.testOneMatch (73 ms)\n[ RUN      ] FindStateEffecterPDR.testNoMatch\n[       OK ] FindStateEffecterPDR.testNoMatch (10 ms)\n[ RUN      ] FindStateEffecterPDR.testEmptyRepo\n[       OK ] FindStateEffecterPDR.testEmptyRepo (5 ms)\n[ RUN      ] FindStateEffecterPDR.testMoreMatch\n[       OK ] FindStateEffecterPDR.testMoreMatch (15 ms)\n[ RUN      ] FindStateEffecterPDR.testManyNoMatch\n[       OK ] FindStateEffecterPDR.testManyNoMatch (8 ms)\n[ RUN      ] FindStateEffecterPDR.testOneMatchOneNoMatch\n[       OK ] FindStateEffecterPDR.testOneMatchOneNoMatch (10 ms)\n[ RUN      ] FindStateEffecterPDR.testOneMatchManyNoMatch\n[       OK ] FindStateEffecterPDR.testOneMatchManyNoMatch (11 ms)\n[ RUN      ] FindStateEffecterPDR.testCompositeEffecter\n[       OK ] FindStateEffecterPDR.testCompositeEffecter (6 ms)\n[ RUN      ] FindStateEffecterPDR.testNoMatchCompositeEffecter\n[       OK ] FindStateEffecterPDR.testNoMatchCompositeEffecter (6 ms)\n[----------] 9 tests from FindStateEffecterPDR (155 ms total)\n\n[----------] 9 tests from FindStateSensorPDR\n[ RUN      ] FindStateSensorPDR.testOneMatch\n[       OK ] FindStateSensorPDR.testOneMatch (9 ms)\n[ RUN      ] FindStateSensorPDR.testNoMatch\n[       OK ] FindStateSensorPDR.testNoMatch (6 ms)\n[ RUN      ] FindStateSensorPDR.testEmptyRepo\n[       OK ] FindStateSensorPDR.testEmptyRepo (5 ms)\n[ RUN      ] FindStateSensorPDR.testMoreMatch\n[       OK ] FindStateSensorPDR.testMoreMatch (12 ms)\n[ RUN      ] FindStateSensorPDR.testManyNoMatch\n[       OK ] FindStateSensorPDR.testManyNoMatch (9 ms)\n[ RUN      ] FindStateSensorPDR.testOneMatchOneNoMatch\n[       OK ] FindStateSensorPDR.testOneMatchOneNoMatch (11 ms)\n[ RUN      ] FindStateSensorPDR.testOneMatchManyNoMatch\n[       OK ] FindStateSensorPDR.testOneMatchManyNoMatch (12 ms)\n[ RUN      ] FindStateSensorPDR.testCompositeSensor\n[       OK ] FindStateSensorPDR.testCompositeSensor (7 ms)\n[ RUN      ] FindStateSensorPDR.testNoMatchCompositeSensor\n[       OK ] FindStateSensorPDR.testNoMatchCompositeSensor (6 ms)\n[----------] 9 tests from FindStateSensorPDR (86 ms total)\n\n[----------] 1 test from toString\n[ RUN      ] toString.allTestCases\n[       OK ] toString.allTestCases (22 ms)\n[----------] 1 test from toString (23 ms total)\n\n[----------] Global test environment tear-down\n[==========] 23 tests from 5 test suites ran. (460 ms total)\n[  PASSED  ] 23 tests.\n", "result": "OK", "starttime": 1636192727.2661042, "duration": 6.29944109916687, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "146"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/common/test/pldm_utils_test"], "stderr": "==1244== Memcheck, a memory error detector\n==1244== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1244== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1244== Command: /home/manojeda/ci_test_area/pldm/build/common/test/pldm_utils_test\n==1244== \n==1244== \n==1244== HEAP SUMMARY:\n==1244==     in use at exit: 0 bytes in 0 blocks\n==1244==   total heap usage: 761 allocs, 761 frees, 153,415 bytes allocated\n==1244== \n==1244== All heap blocks were freed -- no leaks are possible\n==1244== \n==1244== For lists of detected and suppressed errors, rerun with: -s\n==1244== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "package_parser_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 5 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 5 tests from PackageParser\n[ RUN      ] PackageParser.ValidPkgSingleDescriptorSingleComponent\n[       OK ] PackageParser.ValidPkgSingleDescriptorSingleComponent (572 ms)\n[ RUN      ] PackageParser.ValidPkgMultipleDescriptorsMultipleComponents\n[       OK ] PackageParser.ValidPkgMultipleDescriptorsMultipleComponents (139 ms)\n[ RUN      ] PackageParser.InvalidPkgHeaderInfoIncomplete\n[       OK ] PackageParser.InvalidPkgHeaderInfoIncomplete (21 ms)\n[ RUN      ] PackageParser.InvalidPkgNotSupportedHeaderFormat\n[       OK ] PackageParser.InvalidPkgNotSupportedHeaderFormat (5 ms)\n[ RUN      ] PackageParser.InvalidPkgBadChecksum\n[       OK ] PackageParser.InvalidPkgBadChecksum (112 ms)\n[----------] 5 tests from PackageParser (862 ms total)\n\n[----------] Global test environment tear-down\n[==========] 5 tests from 1 test suite ran. (936 ms total)\n[  PASSED  ] 5 tests.\n", "result": "OK", "starttime": 1636192728.3116198, "duration": 7.1702141761779785, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "1"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/fw-update/test/package_parser_test"], "stderr": "==1248== Memcheck, a memory error detector\n==1248== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1248== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1248== Command: /home/manojeda/ci_test_area/pldm/build/fw-update/test/package_parser_test\n==1248== \nDecoding PLDM package header information failed, RC=3\nParsing package header failed, CALC_CHECKSUM=1454282319, PKG_HDR_CHECKSUM=1471059535\n==1248== \n==1248== HEAP SUMMARY:\n==1248==     in use at exit: 0 bytes in 0 blocks\n==1248==   total heap usage: 358 allocs, 358 frees, 128,145 bytes allocated\n==1248== \n==1248== All heap blocks were freed -- no leaks are possible\n==1248== \n==1248== For lists of detected and suppressed errors, rerun with: -s\n==1248== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_pdr_sensor_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 2 tests from 2 test suites.\n[----------] Global test environment set-up.\n[----------] 1 test from GeneratePDRByStateSensor\n[ RUN      ] GeneratePDRByStateSensor.testGoodJson\n[       OK ] GeneratePDRByStateSensor.testGoodJson (1831 ms)\n[----------] 1 test from GeneratePDRByStateSensor (1842 ms total)\n\n[----------] 1 test from GeneratePDR\n[ RUN      ] GeneratePDR.testMalformedJson\n[       OK ] GeneratePDR.testMalformedJson (126 ms)\n[----------] 1 test from GeneratePDR (127 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 2 test suites ran. (2034 ms total)\n[  PASSED  ] 2 tests.\n", "result": "OK", "starttime": 1636192726.377399, "duration": 9.189506530761719, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "225"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_pdr_sensor_test"], "stderr": "==1242== Memcheck, a memory error detector\n==1242== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1242== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1242== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_pdr_sensor_test\n==1242== \n==1242== \n==1242== HEAP SUMMARY:\n==1242==     in use at exit: 0 bytes in 0 blocks\n==1242==   total heap usage: 893 allocs, 893 frees, 285,861 bytes allocated\n==1242== \n==1242== All heap blocks were freed -- no leaks are possible\n==1242== \n==1242== For lists of detected and suppressed errors, rerun with: -s\n==1242== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_pdr_effecter_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 4 tests from 4 test suites.\n[----------] Global test environment set-up.\n[----------] 1 test from GeneratePDRByStateEffecter\n[ RUN      ] GeneratePDRByStateEffecter.testGoodJson\n[       OK ] GeneratePDRByStateEffecter.testGoodJson (2213 ms)\n[----------] 1 test from GeneratePDRByStateEffecter (2222 ms total)\n\n[----------] 1 test from GeneratePDRByNumericEffecter\n[ RUN      ] GeneratePDRByNumericEffecter.testGoodJson\n[       OK ] GeneratePDRByNumericEffecter.testGoodJson (191 ms)\n[----------] 1 test from GeneratePDRByNumericEffecter (191 ms total)\n\n[----------] 1 test from GeneratePDR\n[ RUN      ] GeneratePDR.testMalformedJson\n[       OK ] GeneratePDR.testMalformedJson (177 ms)\n[----------] 1 test from GeneratePDR (178 ms total)\n\n[----------] 1 test from findStateEffecterId\n[ RUN      ] findStateEffecterId.goodJson\n[       OK ] findStateEffecterId.goodJson (150 ms)\n[----------] 1 test from findStateEffecterId (151 ms total)\n\n[----------] Global test environment tear-down\n[==========] 4 tests from 4 test suites ran. (2814 ms total)\n[  PASSED  ] 4 tests.\n", "result": "OK", "starttime": 1636192724.2230666, "duration": 11.39780068397522, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "208"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_pdr_effecter_test"], "stderr": "==1240== Memcheck, a memory error detector\n==1240== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1240== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1240== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_pdr_effecter_test\n==1240== \n==1240== \n==1240== HEAP SUMMARY:\n==1240==     in use at exit: 0 bytes in 0 blocks\n==1240==   total heap usage: 4,312 allocs, 4,312 frees, 568,920 bytes allocated\n==1240== \n==1240== All heap blocks were freed -- no leaks are possible\n==1240== \n==1240== For lists of detected and suppressed errors, rerun with: -s\n==1240== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "inventory_manager_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 4 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 4 tests from InventoryManagerTest\n[ RUN      ] InventoryManagerTest.handleQueryDeviceIdentifiersResponse\n[       OK ] InventoryManagerTest.handleQueryDeviceIdentifiersResponse (968 ms)\n[ RUN      ] InventoryManagerTest.handleQueryDeviceIdentifiersResponseErrorCC\n[       OK ] InventoryManagerTest.handleQueryDeviceIdentifiersResponseErrorCC (8 ms)\n[ RUN      ] InventoryManagerTest.getFirmwareParametersResponse\n[       OK ] InventoryManagerTest.getFirmwareParametersResponse (171 ms)\n[ RUN      ] InventoryManagerTest.getFirmwareParametersResponseErrorCC\n[       OK ] InventoryManagerTest.getFirmwareParametersResponseErrorCC (9 ms)\n[----------] 4 tests from InventoryManagerTest (1171 ms total)\n\n[----------] Global test environment tear-down\n[==========] 4 tests from 1 test suite ran. (1240 ms total)\n[  PASSED  ] 4 tests.\n", "result": "OK", "starttime": 1636192728.172717, "duration": 7.587774991989136, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "158"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/fw-update/test/inventory_manager_test"], "stderr": "==1246== Memcheck, a memory error detector\n==1246== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1246== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1246== Command: /home/manojeda/ci_test_area/pldm/build/fw-update/test/inventory_manager_test\n==1246== \nFailed to send PLDM message. RC = -7, errno = 9\nFailure to send the PLDM request message\nFailed to send GetFirmwareParameters request, EID=1, RC=1\n Failed to send PLDM message. RC = -7, errno = 9\nFailure to send the PLDM request message\nFailed to send GetFirmwareParameters request, EID=2, RC=1\n QueryDeviceIdentifiers response failed with error completion code, EID=1, CC=1\nGetFirmwareParameters response failed with error completion code, EID=1, CC=1\n==1246== \n==1246== HEAP SUMMARY:\n==1246==     in use at exit: 0 bytes in 0 blocks\n==1246==   total heap usage: 463 allocs, 463 frees, 140,222 bytes allocated\n==1246== \n==1246== All heap blocks were freed -- no leaks are possible\n==1246== \n==1246== For lists of detected and suppressed errors, rerun with: -s\n==1246== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "libpldmresponder_platform_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 14 tests from 7 test suites.\n[----------] Global test environment set-up.\n[----------] 5 tests from getPDR\n[ RUN      ] getPDR.testGoodPath\n[       OK ] getPDR.testGoodPath (1951 ms)\n[ RUN      ] getPDR.testShortRead\n[       OK ] getPDR.testShortRead (154 ms)\n[ RUN      ] getPDR.testBadRecordHandle\n[       OK ] getPDR.testBadRecordHandle (169 ms)\n[ RUN      ] getPDR.testNoNextRecord\n[       OK ] getPDR.testNoNextRecord (151 ms)\n[ RUN      ] getPDR.testFindPDR\n[       OK ] getPDR.testFindPDR (174 ms)\n[----------] 5 tests from getPDR (2612 ms total)\n\n[----------] 2 tests from setStateEffecterStatesHandler\n[ RUN      ] setStateEffecterStatesHandler.testGoodRequest\n[       OK ] setStateEffecterStatesHandler.testGoodRequest (367 ms)\n[ RUN      ] setStateEffecterStatesHandler.testBadRequest\n[       OK ] setStateEffecterStatesHandler.testBadRequest (172 ms)\n[----------] 2 tests from setStateEffecterStatesHandler (541 ms total)\n\n[----------] 2 tests from setNumericEffecterValueHandler\n[ RUN      ] setNumericEffecterValueHandler.testGoodRequest\n[       OK ] setNumericEffecterValueHandler.testGoodRequest (224 ms)\n[ RUN      ] setNumericEffecterValueHandler.testBadRequest\n[       OK ] setNumericEffecterValueHandler.testBadRequest (159 ms)\n[----------] 2 tests from setNumericEffecterValueHandler (385 ms total)\n\n[----------] 1 test from parseStateSensor\n[ RUN      ] parseStateSensor.allScenarios\n[       OK ] parseStateSensor.allScenarios (199 ms)\n[----------] 1 test from parseStateSensor (200 ms total)\n\n[----------] 1 test from StateSensorHandler\n[ RUN      ] StateSensorHandler.allScenarios\n[       OK ] StateSensorHandler.allScenarios (363 ms)\n[----------] 1 test from StateSensorHandler (364 ms total)\n\n[----------] 1 test from TerminusLocatorPDR\n[ RUN      ] TerminusLocatorPDR.BMCTerminusLocatorPDR\n[       OK ] TerminusLocatorPDR.BMCTerminusLocatorPDR (33 ms)\n[----------] 1 test from TerminusLocatorPDR (35 ms total)\n\n[----------] 2 tests from getStateSensorReadingsHandler\n[ RUN      ] getStateSensorReadingsHandler.testGoodRequest\n[       OK ] getStateSensorReadingsHandler.testGoodRequest (429 ms)\n[ RUN      ] getStateSensorReadingsHandler.testBadRequest\n[       OK ] getStateSensorReadingsHandler.testBadRequest (124 ms)\n[----------] 2 tests from getStateSensorReadingsHandler (557 ms total)\n\n[----------] Global test environment tear-down\n[==========] 14 tests from 7 test suites ran. (4771 ms total)\n[  PASSED  ] 14 tests.\n", "result": "OK", "starttime": 1636192723.043327, "duration": 12.932801485061646, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "20"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_platform_test"], "stderr": "==1238== Memcheck, a memory error detector\n==1238== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1238== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1238== Command: /home/manojeda/ci_test_area/pldm/build/libpldmresponder/test/libpldmresponder_platform_test\n==1238== \nPDR next record handle 2\nPDR type \u0001\nPDR next record handle 3\nPDR type \u000b\nPDR entity type 33\nPDR next record handle 4\nPDR type \u000b\nPDR entity type 100\nInvalid state set value, EFFECTER_ID=1 VALUE=\u0003 COMPOSITE_EFFECTER_ID=\u0000 DBUS_PATH=/foo/bar\nThe requester sent wrong composite effecter count for the effecter, EFFECTER_ID=1COMP_EFF_CNT=\u0003\neffecter data size is incorrect.\nThe requester sent wrong sensorRearm count for the sensor, SENSOR_ID=1SENSOR_REARM_COUNT=\u0003\n==1238== \n==1238== HEAP SUMMARY:\n==1238==     in use at exit: 0 bytes in 0 blocks\n==1238==   total heap usage: 10,658 allocs, 10,658 frees, 1,272,805 bytes allocated\n==1238== \n==1238== All heap blocks were freed -- no leaks are possible\n==1238== \n==1238== For lists of detected and suppressed errors, rerun with: -s\n==1238== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "device_updater_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 2 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 2 tests from DeviceUpdaterTest\n[ RUN      ] DeviceUpdaterTest.validatePackage\n[       OK ] DeviceUpdaterTest.validatePackage (946 ms)\n[ RUN      ] DeviceUpdaterTest.ReadPackage512B\n[       OK ] DeviceUpdaterTest.ReadPackage512B (61 ms)\n[----------] 2 tests from DeviceUpdaterTest (1024 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test suite ran. (1099 ms total)\n[  PASSED  ] 2 tests.\n", "result": "OK", "starttime": 1636192729.9530058, "duration": 6.28004002571106, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "133"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/fw-update/test/device_updater_test"], "stderr": "==1250== Memcheck, a memory error detector\n==1250== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1250== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1250== Command: /home/manojeda/ci_test_area/pldm/build/fw-update/test/device_updater_test\n==1250== \noffset = 0, length = 512\n==1250== \n==1250== HEAP SUMMARY:\n==1250==     in use at exit: 0 bytes in 0 blocks\n==1250==   total heap usage: 237 allocs, 237 frees, 136,982 bytes allocated\n==1250== \n==1250== All heap blocks were freed -- no leaks are possible\n==1250== \n==1250== For lists of detected and suppressed errors, rerun with: -s\n==1250== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "pldmd_instanceid_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 3 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 3 tests from InstanceId\n[ RUN      ] InstanceId.testNext\n[       OK ] InstanceId.testNext (21 ms)\n[ RUN      ] InstanceId.testAllUsed\n[       OK ] InstanceId.testAllUsed (86 ms)\n[ RUN      ] InstanceId.testMarkfree\n[       OK ] InstanceId.testMarkfree (35 ms)\n[----------] 3 tests from InstanceId (151 ms total)\n\n[----------] Global test environment tear-down\n[==========] 3 tests from 1 test suite ran. (210 ms total)\n[  PASSED  ] 3 tests.\n", "result": "OK", "starttime": 1636192735.571256, "duration": 2.5398941040039062, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "22"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/test/pldmd_instanceid_test"], "stderr": "==1258== Memcheck, a memory error detector\n==1258== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1258== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1258== Command: /home/manojeda/ci_test_area/pldm/build/test/pldmd_instanceid_test\n==1258== \n==1258== \n==1258== HEAP SUMMARY:\n==1258==     in use at exit: 0 bytes in 0 blocks\n==1258==   total heap usage: 202 allocs, 202 frees, 117,008 bytes allocated\n==1258== \n==1258== All heap blocks were freed -- no leaks are possible\n==1258== \n==1258== For lists of detected and suppressed errors, rerun with: -s\n==1258== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "pldmd_registration_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 3 tests from 2 test suites.\n[----------] Global test environment set-up.\n[----------] 1 test from CcOnlyResponse\n[ RUN      ] CcOnlyResponse.testEncode\n[       OK ] CcOnlyResponse.testEncode (54 ms)\n[----------] 1 test from CcOnlyResponse (63 ms total)\n\n[----------] 2 tests from Registration\n[ RUN      ] Registration.testSuccess\n[       OK ] Registration.testSuccess (100 ms)\n[ RUN      ] Registration.testFailure\n[       OK ] Registration.testFailure (93 ms)\n[----------] 2 tests from Registration (194 ms total)\n\n[----------] Global test environment tear-down\n[==========] 3 tests from 2 test suites ran. (308 ms total)\n[  PASSED  ] 3 tests.\n", "result": "OK", "starttime": 1636192735.622798, "duration": 2.634718418121338, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "162"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/test/pldmd_registration_test"], "stderr": "==1260== Memcheck, a memory error detector\n==1260== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1260== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1260== Command: /home/manojeda/ci_test_area/pldm/build/test/pldmd_registration_test\n==1260== \n==1260== \n==1260== HEAP SUMMARY:\n==1260==     in use at exit: 0 bytes in 0 blocks\n==1260==   total heap usage: 216 allocs, 216 frees, 118,564 bytes allocated\n==1260== \n==1260== All heap blocks were freed -- no leaks are possible\n==1260== \n==1260== For lists of detected and suppressed errors, rerun with: -s\n==1260== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "dbus_to_host_effecter_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 3 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 3 tests from HostEffecterParser\n[ RUN      ] HostEffecterParser.parseEffecterJsonGoodPath\n[       OK ] HostEffecterParser.parseEffecterJsonGoodPath (882 ms)\n[ RUN      ] HostEffecterParser.parseEffecterJsonBadPath\n[       OK ] HostEffecterParser.parseEffecterJsonBadPath (103 ms)\n[ RUN      ] HostEffecterParser.findNewStateValue\n[       OK ] HostEffecterParser.findNewStateValue (44 ms)\n[----------] 3 tests from HostEffecterParser (1037 ms total)\n\n[----------] Global test environment tear-down\n[==========] 3 tests from 1 test suite ran. (1082 ms total)\n[  PASSED  ] 3 tests.\n", "result": "OK", "starttime": 1636192733.1897552, "duration": 6.196626663208008, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "242"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/host-bmc/test/dbus_to_host_effecter_test"], "stderr": "==1252== Memcheck, a memory error detector\n==1252== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1252== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1252== Command: /home/manojeda/ci_test_area/pldm/build/host-bmc/test/dbus_to_host_effecter_test\n==1252== \njson does not exist, PATH=\"./host_effecter_jsons/no_json/dbus_to_host_effecter.json\"\nThe json file does not exist or malformed, ERROR=xyz.openbmc_project.Common.Error.InternalFailure: The operation failed internally.\njson does not exist, PATH=\"./host_effecter_jsons/no_json/dbus_to_host_effecter.json\"\nParsing json file failed, FILE=\"./host_effecter_jsons/malformed/dbus_to_host_effecter.json\"\n==1252== \n==1252== HEAP SUMMARY:\n==1252==     in use at exit: 0 bytes in 0 blocks\n==1252==   total heap usage: 920 allocs, 920 frees, 360,629 bytes allocated\n==1252== \n==1252== All heap blocks were freed -- no leaks are possible\n==1252== \n==1252== For lists of detected and suppressed errors, rerun with: -s\n==1252== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "handler_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 3 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 3 tests from HandlerTest\n[ RUN      ] HandlerTest.singleRequestResponseScenario\n[       OK ] HandlerTest.singleRequestResponseScenario (422 ms)\n[ RUN      ] HandlerTest.singleRequestInstanceIdTimerExpired\n[       OK ] HandlerTest.singleRequestInstanceIdTimerExpired (1745 ms)\n[ RUN      ] HandlerTest.multipleRequestResponseScenario\n[       OK ] HandlerTest.multipleRequestResponseScenario (1175 ms)\n[----------] 3 tests from HandlerTest (3349 ms total)\n\n[----------] Global test environment tear-down\n[==========] 3 tests from 1 test suite ran. (3393 ms total)\n[  PASSED  ] 3 tests.\n", "result": "OK", "starttime": 1636192733.5681112, "duration": 8.28613805770874, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "222"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/requester/test/handler_test"], "stderr": "==1254== Memcheck, a memory error detector\n==1254== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1254== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1254== Command: /home/manojeda/ci_test_area/pldm/build/requester/test/handler_test\n==1254== \nResponse not received for the request, instance ID expired. EID = 0 INSTANCE_ID = 0 TYPE = 0 COMMAND = 0\n==1254== \n==1254== HEAP SUMMARY:\n==1254==     in use at exit: 0 bytes in 0 blocks\n==1254==   total heap usage: 399 allocs, 399 frees, 138,199 bytes allocated\n==1254== \n==1254== All heap blocks were freed -- no leaks are possible\n==1254== \n==1254== For lists of detected and suppressed errors, rerun with: -s\n==1254== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
{"name": "request_test", "stdout": "Running main() from ../googletest/src/gtest_main.cc\n[==========] Running 4 tests from 1 test suite.\n[----------] Global test environment set-up.\n[----------] 4 tests from RequestIntfTest\n[ RUN      ] RequestIntfTest.0Retries100msTimeout\n[       OK ] RequestIntfTest.0Retries100msTimeout (153 ms)\n[ RUN      ] RequestIntfTest.2Retries100msTimeout\n[       OK ] RequestIntfTest.2Retries100msTimeout (1242 ms)\n[ RUN      ] RequestIntfTest.9Retries100msTimeoutRequestStoppedAfter1sec\n[       OK ] RequestIntfTest.9Retries100msTimeoutRequestStoppedAfter1sec (1750 ms)\n[ RUN      ] RequestIntfTest.2Retries100msTimeoutsendReturnsError\n[       OK ] RequestIntfTest.2Retries100msTimeoutsendReturnsError (3 ms)\n[----------] 4 tests from RequestIntfTest (3155 ms total)\n\n[----------] Global test environment tear-down\n[==========] 4 tests from 1 test suite ran. (3184 ms total)\n[  PASSED  ] 4 tests.\n", "result": "OK", "starttime": 1636192735.4840996, "duration": 7.106890439987183, "returncode": 0, "env": {"PATH": "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin", "HOSTNAME": "docker-desktop", "TERM": "xterm", "MAKEFLAGS": "", "DEBIAN_FRONTEND": "noninteractive", "PYTHONPATH": "/usr/local/lib/python3.8/site-packages/", "HOME": "/home/manojeda", "LC_CTYPE": "C.UTF-8", "DBUS_SESSION_BUS_ADDRESS": "unix:path=/tmp/tmp2f90l2bs/system_bus_socket,guid=f8d5bdda0399436a03979bce61865134", "DBUS_STARTER_BUS_TYPE": "session", "MALLOC_PERTURB_": "165"}, "command": ["valgrind", "/home/manojeda/ci_test_area/pldm/build/requester/test/request_test"], "stderr": "==1256== Memcheck, a memory error detector\n==1256== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==1256== Using Valgrind-3.17.0 and LibVEX; rerun with -h for copyright info\n==1256== Command: /home/manojeda/ci_test_area/pldm/build/requester/test/request_test\n==1256== \n==1256== \n==1256== HEAP SUMMARY:\n==1256==     in use at exit: 0 bytes in 0 blocks\n==1256==   total heap usage: 446 allocs, 446 frees, 141,695 bytes allocated\n==1256== \n==1256== All heap blocks were freed -- no leaks are possible\n==1256== \n==1256== For lists of detected and suppressed errors, rerun with: -s\n==1256== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n"}
